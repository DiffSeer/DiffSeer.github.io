{"version":3,"sources":["store/actions/index.js","store/http.js","views/msv2-chart.js","components/MSV2.jsx","views/project-timeline.js","components/ProjectTimeLine.jsx","App.jsx","serviceWorker.js","store/reducer.js","store/index.js","index.js"],"names":["updateSelectedDate","host","uri","query","options","axios","get","this","params","then","res","data","post","headers","payload","type","updateUnfoldDay","updateUnfoldDiff","updateEdgeReorder","width","height","margin","top","left","bottom","right","svg","tooltip","topK","x","d3","y","color","xAxis","yAxis","scaleUnit","degreeThreshold","line","defined","d","isNaN","sum","date","brush","parseDate","dataset","nodes","node_index","originNodeIndex","industry_index","index_scale","invert_index","edges","dayEdgeCount","days","unfoldDay","dayLocation","metrixUnit","unit","slice_start","slice_end","nodelen","brushWidth","staTheight","staNwidth","container","timeSpan","nodeOrder","dispatch","domain","range","length","clientWidth","clientHeight","g","attr","call","ticks","select","remove","tickSizeOuter","append","drawColorLegendOuter","unfoldDiff","focusSpan","needOrder","threshold","maxmapping","orderweight","unfoldSwitch","msvSwitch","kelpSwitch","colorSwitch","forEach","item","i","originInvertIndex","maxmap","JSON","parse","stringify","originData","mdata","metrixOriginData","diffdata","metrixDiffData","hdata","highMatrix","slice","highData","node_info","node","Array","fill","element","id","degree","posdegree","negdegree","posvalue","negvalue","Math","max","min","strength2","push","MatrixSet","includes","matrix","filter","cell","WeightedOrder","reorder4Weight","matrix_width","location","count","day","Object","values","map","max_value","min_value","weightThreshold","maxStrength2","posrect","T","highScale","nodeScale","mcolor","nodeline","selectAll","join","classed","industry","industry_index2","text","timelabels","parseInt","staTscale","each","ddd","index","day_index","totalPosEdge","totalNegEdge","staNscale1","staNscale2","staNdata","maxFre","negfrequency","posfrequency","localY","area1","y1","y0","curve","area2","datum","Vgap","Hgap","posline","negline","negPath","posPath","kelpCenterData","set","sort","a","b","posbridgeSet","type2","bridgeSet","posbridgeLen","bridgeLen","distance","set1","set2","posNodes1","negNodes1","posNodes2","negNodes2","ifOverlap","posEdge","negEdge","active1","active2","date1","date2","negMix","posMix","initpos","maxdist","index1","index2","dist","abs","x1","x2","y2","lightData","totalposvalue","totalnegvalue","strength","diffRows","diffData","row","rowindex","cellindex","source","target","value","on","event","celldata","matrixData","selector","parentNode","kernel","X","V","v","k","nodecount","weight","mweight","n","N","K","t","reorder","r","j","Mlen","mindex","A","B","rowDist","p","distance_matrix","order","D","moran","console","log","r1","r2","cells","m","result","hugeMatrix","row1","concat","weighted_value_rows","start_point","axis_label","linearGradient","style","axis_scale","axis_top","tickSize","tickFormat","axis_bottom","drawColorLegend4Diff","drawColorLegend4Org","View","props","state","resetcheck","streamSwitch","msvnodeSwitch","resetButton","bind","nodeReorder","edgeReorder","MSVSwitch","Chart","init","prevProps","prevState","toString","update","checked","setState","className","title","extra","float","marginTop","tooltipPlacement","defaultValue","onChange","MaxAfterChange","StrongAfterChange","onAfterChange","OrderWeight","shape","onClick","icon","RetweetOutlined","size","checkedChildren","unCheckedChildren","defaultChecked","KelpSwitch","ReloadOutlined","placement","overlayStyle","minWidth","QuestionOutlined","ref","position","display","flexDirection","justifyContent","alignItems","React","PureComponent","connect","MSVorder","time","symbolSize","symbol","brushHere","nice","colorScale","timeWidth","extent","dateRange","selection","move","invert","begin","end","scatter","selectedDate","xScale","yScale","path","moveTo","array","lineTo","App","ProjectTimeLine","MSV2","Boolean","window","hostname","match","reducer","action","enhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","store","createStore","userID","users","userBehaviors","dayTime","hourBehaviors","minBehaviorsOfHour","userMinBehaviors","selectedCircle","selectedDiffCircle","networkView","diffNetworkView","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a734891b.chunk.js","sourcesContent":["import Http from '../http';\r\n\r\nconst http = new Http();\r\n\r\n\r\nexport const updateUserID = payload => ({\r\n  type: 'UPDATE_USER_ID',\r\n  payload\r\n});\r\n\r\nexport const updateDayTime = payload => ({\r\n  type: 'UPDATE_DAY_TIME',\r\n  payload\r\n});\r\n\r\nexport const getUserBehaviorsOfHourByTime = payload => async (dispatch) => {\r\n  const result = await http.get('getUserBehaviorsOfHourByTime', {\r\n    userID: payload.userID,\r\n    time: payload.time\r\n  });\r\n  const action = {\r\n    type: 'GET_USER_BEHAVIORS_OF_HOUR_BY_TIME',\r\n    payload: result.res\r\n  };\r\n  dispatch(action);\r\n}\r\n\r\nexport const getUserBehaviorsOfMinByTime = payload => async (dispatch) => {\r\n  const result = await http.get('getUserBehaviorsOfMinByTime', {\r\n    userID: payload.userID,\r\n    time: payload.time\r\n  });\r\n  const action = {\r\n    type: 'GET_USER_BEHAVIORS_OF_MIN_BY_TIME',\r\n    payload: result.res\r\n  };\r\n  dispatch(action);\r\n}\r\n\r\nexport const updateSelectedCircle = payload => {\r\n    return {\r\n      type: 'UPDATE_SELECTEDCIRCLE',\r\n      payload\r\n    }\r\n}\r\nexport const updateSelectedDiffCircle = payload => {\r\n    return {\r\n      type: 'UPDATE_SELECTEDDIFFCIRCLE',\r\n      payload\r\n    }\r\n}\r\nexport const updateSelectedDate = payload => {\r\n    return {\r\n      type: 'UPDATE_SELECTEDDATE',\r\n      payload\r\n    }\r\n}\r\nexport const updateNetworkView = payload => {\r\n    return {\r\n      type: 'UPDATE_NETWORKVIEW',\r\n      payload\r\n    }\r\n}\r\nexport const updateDiffNetworkView = payload => {\r\n    return {\r\n      type: 'UPDATE_DIFFNETWORKVIEW',\r\n      payload\r\n    }\r\n}\r\nexport const addUnfoldDay = payload => {\r\n    return {\r\n      type: 'ADD_UNFOLDDAY',\r\n      payload\r\n    }\r\n}\r\nexport const deleteUnfoldDay = payload => {\r\n    return {\r\n      type: 'DELETE_UNFOLDDAY',\r\n      payload\r\n    }\r\n}\r\nexport const updateUnfoldDay = payload => {\r\n    return {\r\n      type: 'UPDATE_UNFOLDDAY',\r\n      payload\r\n    }\r\n}\r\nexport const updateUnfoldDiff = payload => {\r\n    return {\r\n      type: 'UPDATE_UNFOLDDIFF',\r\n      payload\r\n    }\r\n}\r\nexport const updateNeedOrder = payload => {\r\n    return {\r\n      type: 'UPDATE_NEEDORDER',\r\n      payload\r\n    }\r\n}\r\nexport const updateLocation = payload => {\r\n    return {\r\n      type: 'UPDATE_LOCATION',\r\n      payload\r\n    }\r\n}\r\nexport const updateNodeOrder = payload => {\r\n    return {\r\n      type: 'UPDATE_NODEORDER',\r\n      payload\r\n    }\r\n}\r\nexport const updateFocusSpan = payload => {\r\n    return {\r\n      type: 'UPDATE_FOCUSSPAN',\r\n      payload\r\n    }\r\n}\r\nexport const updateTimeSpan = payload => {\r\n    return {\r\n      type: 'UPDATE_TIMESPAN',\r\n      payload\r\n    }\r\n}\r\nexport const updateUnfoldSwitch = payload => {\r\n    return {\r\n      type: 'UPDATE_UNFOLDSWITCH',\r\n      payload\r\n    }\r\n}\r\nexport const updateEdgeReorder = payload => {\r\n    return {\r\n      type: 'UPDATE_EDGEREORDER',\r\n      payload\r\n    }\r\n}\r\nexport const updateStreamSwitch = payload => {\r\n    return {\r\n      type: 'UPDATE_STREAMSWITCH',\r\n      payload\r\n    }\r\n}\r\nexport const reset = payload => {\r\n    return {\r\n      type: 'RESET',\r\n      payload\r\n    }\r\n}\r\n;","import axios from 'axios'\r\n\r\nexport default class Http {\r\n\r\n  host = 'http://localhost:5201/api';\r\n\r\n  get (uri, query, options) {\r\n    return axios.get(`${this.host}/${uri}`, { params: query })\r\n      .then(res => {\r\n        return res.data;\r\n      })\r\n  }\r\n\r\n  post (uri, query, options) {\r\n    return axios.post(`${this.host}/${uri}`, query ,{headers:{'Content-Type': 'application/json'}})\r\n      .then(res => {\r\n        return res.data;\r\n      })\r\n  }\r\n}","import * as d3 from 'd3';\r\n//dataset1\r\n// import originData from './data/dataset1/28_all28_diffChart_100.json';\r\n// import metrixOriginData from './data/dataset1/28_all28_oriGraph_100.json';\r\n// import metrixDiffData from './data/dataset1/28_all28_diffGraph_100.json';\r\n// import highMatrix from './data/dataset1/28_all28_high_m_100.json'\r\n//dataset2\r\n// import originData from './data/dataset2/diffChart_5.json';\r\n// import metrixOriginData from './data/dataset2/oriGraph_5.json';\r\n// import metrixDiffData from './data/dataset2/diffGraph_5.json';\r\n// import highMatrix from './data/dataset2/high_m_5.json'\r\n// dataset3\r\nimport originData from './data/dataset3/diffChart_day.json';\r\nimport metrixOriginData from './data/dataset3/oriGraph_day.json';\r\nimport metrixDiffData from './data/dataset3/diffGraph_day.json';\r\nimport highMatrix from './data/dataset3/high_m_day.json'\r\n\r\nimport {updateUnfoldDay,updateNodeOrder, updateUnfoldDiff } from '../store/actions';\r\nimport * as reorder from 'reorder.js';\r\n\r\nclass chart {\r\n    // 画布的宽高\r\n    width = 0;\r\n    height = 0;\r\n    // 外边距\r\n    margin = {\r\n        top: 10,\r\n        left: 30,\r\n        bottom: 20,\r\n        right: 10\r\n    };\r\n\r\n    svg = null;\r\n    // tooltip\r\n    tooltip = null;\r\n    topK = 10;\r\n    // 比例尺\r\n    // x = d3.scaleUtc()\r\n    x = d3.scaleLinear()\r\n    y = d3.scaleLinear()\r\n    color = d3.scaleLinear()\r\n    xAxis = null;\r\n    yAxis = null;\r\n    scaleUnit = d3.scaleLinear() //单元大小\r\n\r\n    //阈值\r\n    degreeThreshold = 0\r\n        //线生成器\r\n    line = d3.line()\r\n        .defined(d => !isNaN(d.sum))\r\n        .x(d => this.x(d.date))\r\n        .y(d => this.y(d.sum));\r\n    //刷选初始化\r\n    brush = d3.brushX();\r\n    //时间转换器\r\n    parseDate = d3.timeParse('%Y-%m-%d');\r\n    //msv\r\n\r\n    //dataset\r\n    dataset = 3\r\n\r\n    //     // dataset1\r\n    //         nodes = ['801010','801020','801030','801040','801050','801080','801110','801120','801130','801140','801150','801160',\r\n    //     '801170','801180','801200','801210','801230','801710','801720','801730','801740','801750','801760','801770','801780','801790'\r\n    //     ,'801880','801890'];\r\n\r\n    //     node_index = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27];\r\n    //     originNodeIndex =  [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27];\r\n    // industry_index = {'801010':'农林牧渔','801020':'采掘','801030':'化工','801040':'钢铁','801050':'有色金属','801080':'电子',\r\n    //                    '801110':'家用电器','801120':'食品饮料','801130':'纺织服装','801140':'轻工制造','801150':'医药生物','801160':'公共事业',\r\n    //                     '801170':'交通运输','801180':'房地产' ,'801200':'商业贸易','801210':'休闲服务','801230':'综合','801710':'建筑材料',\r\n    //                     '801720':'建筑装饰','801730':'电气设备','801740':'国防军工','801750':'计算机','801760':'传媒','801770':'通信',\r\n    //                     '801780':'银行','801790':'非银金融','801880':'汽车','801890':'机械设备'}\r\n    // industry_index2 = {'801010':'Ag','801020':'Mi','801030':'Ch','801040':'FM','801050':'NM','801080':'El',\r\n    //                    '801110':'HA','801120':'FB','801130':'TA','801140':'LM','801150':'HC','801160':'Ut',\r\n    //                     '801170':'Tr','801180':'RE' ,'801200':'Co','801210':'LS','801230':'Cl','801710':'CM',\r\n    //                     '801720':'CD','801730':'EE','801740':'De','801750':'Cp','801760':'Me','801770':'Te',\r\n    //                     '801780':'Ba','801790':'Fi','801880':'Car','801890':'ME'}\r\n\r\n    // industry_index3 = {'801010':'Agriculture','801020':'Mining','801030':'Chemicals','801040':'Ferrous Metal','801050':'Nonferrous Metal','801080':'Electronics',\r\n    //                    '801110':'Household Appliances','801120':'Food & Beverage','801130':'Textile & Apparel','801140':'Light-industry Manufacturing','801150':'Health Care','801160':'Utilities',\r\n    //                     '801170':'Transportation','801180':'Real Estate' ,'801200':'Commerce','801210':'Leisure Service','801230':'Conglomerate','801710':'Construction Materials',\r\n    //                     '801720':'Construction Decoration','801730':'Electrical Equipment','801740':'Defense','801750':'Computer','801760':'Media','801770':'Telecommunication',\r\n    //                     '801780':'Bank','801790':'Financials','801880':'Car','801890':'Machinery Equipment'}\r\n\r\n    // //dataset2\r\n    // nodes = [\"600\", \"601\", \"602\", \"603\", \"605\", \"606\", \"607\", \"609\", \"610\", \"611\", \"612\", \"613\", \"614\", \"615\", \"616\", \"617\", \"618\", \"619\", \"620\", \"621\", \"622\", \"623\", \"624\", \"626\", \"627\", \"628\", \"629\", \"633\", \"634\", \"635\", \"636\", \"638\", \"641\", \"643\", \"644\", \"646\", \"647\", \"648\", \"649\", \"650\", \"651\", \"652\", \"654\", \"655\", \"656\", \"658\", \"660\", \"661\", \"662\", \"663\", \"664\", \"665\", \"666\", \"667\", \"668\", \"669\", \"674\", \"676\", \"677\", \"678\", \"681\", \"682\", \"683\", \"684\", \"685\", \"686\", \"687\", \"689\", \"690\", \"691\", \"692\", \"694\", \"695\", \"696\", \"698\", \"699\", \"802\", \"803\", \"804\", \"806\", \"807\", \"809\", \"810\", \"812\", \"813\", \"814\", \"815\", \"817\", \"819\", \"821\", \"822\", \"823\", \"824\", \"825\", \"826\", \"827\", \"828\", \"829\", \"830\", \"831\", \"832\", \"833\", \"834\", \"836\", \"838\", \"841\", \"843\", \"845\", \"847\", \"848\", \"849\", \"851\", \"852\", \"853\", \"854\", \"855\", \"856\", \"857\", \"858\", \"860\", \"862\", \"863\", \"864\", \"865\", \"866\", \"867\", \"868\", \"869\", \"871\", \"873\", \"875\", \"880\", \"881\", \"882\", \"883\", \"884\", \"886\", \"887\", \"888\", \"889\", \"890\", \"891\", \"892\", \"893\", \"894\", \"895\", \"896\", \"897\", \"898\", \"1108\", \"1144\", \"1148\", \"1164\", \"1170\", \"1181\", \"1190\", \"1492\", \"1601\", \"1613\", \"1618\", \"1622\", \"1628\", \"1629\", \"1632\", \"1644\", \"1645\", \"1649\", \"1651\", \"1657\", \"1658\", \"1660\", \"1662\", \"1667\", \"1671\", \"1672\", \"1674\", \"1678\", \"1679\", \"1686\", \"1856\"];\r\n    // node_index = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179];\r\n    // originNodeIndex = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179];\r\n    // industry_index = { \"600\": \"600\", \"601\": \"601\", \"602\": \"602\", \"603\": \"603\", \"605\": \"605\", \"606\": \"606\", \"607\": \"607\", \"609\": \"609\", \"610\": \"610\", \"611\": \"611\", \"612\": \"612\", \"613\": \"613\", \"614\": \"614\", \"615\": \"615\", \"616\": \"616\", \"617\": \"617\", \"618\": \"618\", \"619\": \"619\", \"620\": \"620\", \"621\": \"621\", \"622\": \"622\", \"623\": \"623\", \"624\": \"624\", \"626\": \"626\", \"627\": \"627\", \"628\": \"628\", \"629\": \"629\", \"633\": \"633\", \"634\": \"634\", \"635\": \"635\", \"636\": \"636\", \"638\": \"638\", \"641\": \"641\", \"643\": \"643\", \"644\": \"644\", \"646\": \"646\", \"647\": \"647\", \"648\": \"648\", \"649\": \"649\", \"650\": \"650\", \"651\": \"651\", \"652\": \"652\", \"654\": \"654\", \"655\": \"655\", \"656\": \"656\", \"658\": \"658\", \"660\": \"660\", \"661\": \"661\", \"662\": \"662\", \"663\": \"663\", \"664\": \"664\", \"665\": \"665\", \"666\": \"666\", \"667\": \"667\", \"668\": \"668\", \"669\": \"669\", \"674\": \"674\", \"676\": \"676\", \"677\": \"677\", \"678\": \"678\", \"681\": \"681\", \"682\": \"682\", \"683\": \"683\", \"684\": \"684\", \"685\": \"685\", \"686\": \"686\", \"687\": \"687\", \"689\": \"689\", \"690\": \"690\", \"691\": \"691\", \"692\": \"692\", \"694\": \"694\", \"695\": \"695\", \"696\": \"696\", \"698\": \"698\", \"699\": \"699\", \"802\": \"802\", \"803\": \"803\", \"804\": \"804\", \"806\": \"806\", \"807\": \"807\", \"809\": \"809\", \"810\": \"810\", \"812\": \"812\", \"813\": \"813\", \"814\": \"814\", \"815\": \"815\", \"817\": \"817\", \"819\": \"819\", \"821\": \"821\", \"822\": \"822\", \"823\": \"823\", \"824\": \"824\", \"825\": \"825\", \"826\": \"826\", \"827\": \"827\", \"828\": \"828\", \"829\": \"829\", \"830\": \"830\", \"831\": \"831\", \"832\": \"832\", \"833\": \"833\", \"834\": \"834\", \"836\": \"836\", \"838\": \"838\", \"841\": \"841\", \"843\": \"843\", \"845\": \"845\", \"847\": \"847\", \"848\": \"848\", \"849\": \"849\", \"851\": \"851\", \"852\": \"852\", \"853\": \"853\", \"854\": \"854\", \"855\": \"855\", \"856\": \"856\", \"857\": \"857\", \"858\": \"858\", \"860\": \"860\", \"862\": \"862\", \"863\": \"863\", \"864\": \"864\", \"865\": \"865\", \"866\": \"866\", \"867\": \"867\", \"868\": \"868\", \"869\": \"869\", \"871\": \"871\", \"873\": \"873\", \"875\": \"875\", \"880\": \"880\", \"881\": \"881\", \"882\": \"882\", \"883\": \"883\", \"884\": \"884\", \"886\": \"886\", \"887\": \"887\", \"888\": \"888\", \"889\": \"889\", \"890\": \"890\", \"891\": \"891\", \"892\": \"892\", \"893\": \"893\", \"894\": \"894\", \"895\": \"895\", \"896\": \"896\", \"897\": \"897\", \"898\": \"898\", \"1108\": \"1108\", \"1144\": \"1144\", \"1148\": \"1148\", \"1164\": \"1164\", \"1170\": \"1170\", \"1181\": \"1181\", \"1190\": \"1190\", \"1492\": \"1492\", \"1601\": \"1601\", \"1613\": \"1613\", \"1618\": \"1618\", \"1622\": \"1622\", \"1628\": \"1628\", \"1629\": \"1629\", \"1632\": \"1632\", \"1644\": \"1644\", \"1645\": \"1645\", \"1649\": \"1649\", \"1651\": \"1651\", \"1657\": \"1657\", \"1658\": \"1658\", \"1660\": \"1660\", \"1662\": \"1662\", \"1667\": \"1667\", \"1671\": \"1671\", \"1672\": \"1672\", \"1674\": \"1674\", \"1678\": \"1678\", \"1679\": \"1679\", \"1686\": \"1686\", \"1856\": \"1856\" };\r\n\r\n    //dataset3\r\n    nodes = [\"benettonrugby\", \"cardiff_blues\", \"connachtrugby\", \"dragonsrugby\", \"edinburghrugby\", \"glasgowwarriors\", \"leinsterrugby\", \"munsterrugby\", \"ospreys\", \"scarlets_rugby\", \"ulsterrugby\", \"zebrerugby\"];\r\n\r\n      \r\n    node_index = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];  \r\n    originNodeIndex = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\r\n\r\n    industry_index = { \"benettonrugby\": \"be\", \"cardiff_blues\": \"ca\", \"connachtrugby\": \"co\", \"dragonsrugby\": \"dr\", \"edinburghrugby\": \"ed\", \"glasgowwarriors\": \"gl\", \"leinsterrugby\": \"le\", \"munsterrugby\": \"mu\", \"ospreys\": \"os\", \"scarlets_rugby\": \"sc\", \"ulsterrugby\": \"ul\", \"zebrerugby\": \"ze\" }\r\n\r\n    //配置\r\n    index_scale = d3.scaleOrdinal()\r\n    invert_index = d3.scaleOrdinal()\r\n    edges = [];\r\n    dayEdgeCount = {}; //每日边数，全联通的话边数相同；\r\n    days = []; //全部日期集合\r\n    unfoldDay = []; //展开的日期\r\n    dayLocation = []; //每天在视图中呈现的位置；\r\n    metrixUnit = 500; //每个矩阵的宽度占位\r\n    unit = 0;\r\n\r\n    slice_start = 2200;\r\n    slice_end = 2210;\r\n\r\n\r\n    nodelen = 0;\r\n    brushWidth = 0;\r\n    staTheight = 0;\r\n    staNwidth = 0\r\n\r\n\r\n    // 初始化\r\n    init(container, timeSpan, nodeOrder, dispatch) {\r\n        // this.node_index = nodeOrder;\r\n        this.index_scale.domain(this.nodes).range(this.node_index)\r\n        this.invert_index.domain(this.node_index).range(this.nodes)\r\n        this.nodelen = this.nodes.length\r\n\r\n        //长宽获取\r\n        this.width = container.clientWidth;\r\n        this.height = container.clientHeight;\r\n        //比例尺赋值\r\n        // this.x.domain(d3.extent(data, d => d.date))\r\n        //     .range([this.margin.left,this.width - this.margin.right])\r\n        this.x.domain([0, this.edges.length])\r\n            .range([this.margin.left, this.width - this.margin.right])\r\n            //Y轴映射\r\n        this.y.domain([-0.5 - (this.nodelen * 0.15), this.nodelen - 0.5])\r\n            .range([this.margin.top, this.height - this.margin.bottom])\r\n            // let min = d3.min(this.edges, d => d.value)\r\n            // let max = d3.max(this.edges, d => d.value)\r\n            // let extremum = Math.max(Math.abs(max),Math.abs(min))\r\n            // this.color.domain([-extremum*0.9,0,extremum  ])\r\n            //     .range([ '#d8b365','#f5f5f5', '#5ab4ac']);\r\n\r\n\r\n        this.nodelen = this.nodes.length\r\n        this.staTheight = this.y(-1) - this.y(-0.5 - this.nodelen * 0.1) //辅助视图宽度\r\n        this.staNwidth = this.staTheight * 2\r\n\r\n        // //坐标轴赋值\r\n        this.yAxis = g => g\r\n            .attr(\"transform\", `translate(${this.margin.left},0)`)\r\n            .call(d3.axisLeft(this.y).ticks(this.nodes.length))\r\n            .call(g => g.select(\".domain\").remove())\r\n        this.xAxis = g => g\r\n            .attr(\"transform\", `translate(0,${this.height - this.margin.bottom})`)\r\n            .call(d3.axisBottom(this.x).ticks(this.width / 80).tickSizeOuter(0))\r\n            .call(g => g.select(\".domain\").remove())\r\n\r\n\r\n        //svg创建\r\n        this.svg = d3.select(container)\r\n            .append('svg')\r\n            .attr('width', this.width)\r\n            .attr('height', this.height)\r\n\r\n        //legend\r\n        this.drawColorLegendOuter()\r\n\r\n    }\r\n\r\n    // 更新数据，重绘视图\r\n    update(timeSpan, unfoldDay, unfoldDiff, nodeOrder, focusSpan, needOrder, threshold, maxmapping, orderweight, unfoldSwitch, msvSwitch, kelpSwitch, colorSwitch, dispatch) {\r\n            nodeOrder.forEach((item, i) => {\r\n                    this.node_index[item] = i\r\n                })\r\n                // this.node_index = nodeOrder;\r\n            this.index_scale = d3.scaleOrdinal().domain(this.nodes).range(this.node_index)\r\n            this.invert_index = d3.scaleOrdinal().domain(this.node_index).range(this.nodes)\r\n            this.degreeThreshold = (this.nodes.length - 2) * threshold * 0.01\r\n            let originInvertIndex = d3.scaleOrdinal().domain(this.originNodeIndex).range(this.nodes)\r\n            let nodelen = this.nodes.length\r\n            let maxmap = maxmapping * 0.01\r\n\r\n            //删除原有svg\r\n            d3.selectAll('rect.edge').remove();\r\n            d3.selectAll('rect.small').remove();\r\n            d3.selectAll('rect.metrix').remove();\r\n            d3.selectAll('circle.start').remove();\r\n            d3.selectAll('circle.end').remove();\r\n            d3.selectAll('circle.light').remove();\r\n            d3.selectAll('g.industry').remove();\r\n            d3.selectAll('g.high-level').remove();\r\n            d3.selectAll('.MSV').remove();\r\n            d3.selectAll('g.matrix').remove();\r\n            d3.selectAll('circle.origin').remove();\r\n            d3.selectAll('.stream').remove();\r\n            d3.selectAll('.kelp').remove();\r\n            d3.selectAll('.matrix').remove();\r\n            d3.selectAll('.staT').remove();\r\n            d3.selectAll('.staN').remove();\r\n            d3.selectAll('.brush').remove();\r\n            d3.selectAll('.industry').remove();\r\n            d3.selectAll('.timelabel').remove();\r\n\r\n\r\n \r\n\r\n            //数据\r\n            let data = JSON.parse(JSON.stringify(originData));\r\n            let mdata = JSON.parse(JSON.stringify(metrixOriginData));\r\n            let diffdata = JSON.parse(JSON.stringify(metrixDiffData));\r\n            let hdata = JSON.parse(JSON.stringify(highMatrix));\r\n\r\n            if (timeSpan[0] !== 'start') {\r\n                this.slice_start = timeSpan[0]\r\n                this.slice_end = timeSpan[1]\r\n            }\r\n            data = data.slice(this.slice_start, this.slice_end)\r\n            hdata = hdata.slice(this.slice_start, this.slice_end)\r\n            let highData = data //顶层数据\r\n            let newData = {}\r\n            this.days = []\r\n            this.dayEdgeCount = {}\r\n            let all_edges_count = 0\r\n                //生成node info\r\n            let node_info = {}\r\n            this.nodes.forEach((node) => {\r\n                //为每个node生成一个对象\r\n                node_info[node] = {\r\n                    'id': node,\r\n                    'total_degree': 0,\r\n                    'total_posdegree': 0,\r\n                    'total_negdegree': 0,\r\n                    'total_pos_value': 0,\r\n                    'total_neg_value': 0,\r\n                    'max_value': 0,\r\n                    \"min_value\": 0,\r\n                    'max_posdegree': 0,\r\n                    \"max_negdegree\": 0,\r\n                    'posdistribution': [],\r\n                    \"negdistribution\": [],\r\n                    \"posfrequency\": new Array(nodelen).fill(0),\r\n                    \"negfrequency\": new Array(nodelen).fill(0),\r\n                    \"maxStrength2\": 0,\r\n                }\r\n            })\r\n\r\n            // let posfrequency = new Array(nodelen).fill(0)\r\n            // let negfrequency = new Array(nodelen).fill(0)\r\n\r\n            data.forEach(element => {\r\n                let newLink = [];\r\n                element.nodes.forEach((node) => {\r\n                    //修改nodeinfo\r\n                    node_info[node.id] = {\r\n                        ...node_info[node.id],\r\n                        'total_degree': node_info[node.id]['total_degree'] + node.degree,\r\n                        'total_posdegree': node_info[node.id]['total_posdegree'] + node.posdegree,\r\n                        'total_negdegree': node_info[node.id]['total_negdegree'] + node.negdegree,\r\n                        'total_pos_value': node_info[node.id]['total_pos_value'] + node.posvalue,\r\n                        'total_neg_value': node_info[node.id]['total_neg_value'] + node.negvalue,\r\n                        'max_value': Math.max(node_info[node.id]['max_value'], node.posvalue),\r\n                        \"min_value\": Math.min(node_info[node.id]['min_value'], node.negvalue),\r\n                        'max_posdegree': Math.max(node_info[node.id]['max_posdegree'], node.posdegree),\r\n                        \"max_negdegree\": Math.max(node_info[node.id]['max_negdegree'], node.negdegree),\r\n                        'posdistribution': [...node_info[node.id]['posdistribution'], node.posdegree],\r\n                        \"negdistribution\": [...node_info[node.id]['negdistribution'], node.negdegree],\r\n                        \"maxStrength2\": Math.max(node_info[node.id]['maxStrength2'], node.strength2),\r\n                    }\r\n                    if (node.posdegree !== 0) {\r\n                        node_info[node.id]['posfrequency'][node.posdegree] = node_info[node.id]['posfrequency'][node.posdegree] + 1;\r\n                    }\r\n                    if (node.negdegree !== 0) {\r\n                        node_info[node.id]['negfrequency'][node.negdegree] = node_info[node.id]['negfrequency'][node.negdegree] + 1;\r\n                    }\r\n\r\n                })\r\n                this.days.push(element.date)\r\n            });\r\n\r\n            //重新排序节点\r\n            if (needOrder) {\r\n                //矩阵转化\r\n                let MatrixSet = []\r\n                unfoldDay.forEach((item) => {\r\n                        if (unfoldDiff.includes(item)) {\r\n                            let matrix = diffdata.filter(({ date }) => date === item)[0].cell\r\n                            MatrixSet.push(matrix)\r\n                        } else {\r\n                            let matrix = mdata.filter(({ date }) => date === item)[0].cell\r\n                            MatrixSet.push(matrix)\r\n                        }\r\n                    })\r\n                    //排序并修改顺序\r\n                let WeightedOrder = this.reorder4Weight(hdata, nodelen, MatrixSet, orderweight)\r\n                dispatch(updateNodeOrder(WeightedOrder))\r\n            }\r\n\r\n\r\n            //重新计算边位置\r\n\r\n            //重新计算location\r\n            //计算让矩阵方形的宽度\r\n            let y = this.y\r\n\r\n            let staTheight = y(-1) - y(-0.5 - nodelen * 0.15) //辅助视图宽度\r\n            let staNwidth = staTheight\r\n\r\n            let unit = ((this.width - this.margin.left - this.margin.right - staNwidth) - (unfoldDay.length * (y(nodelen) - y(0)))) / this.days.length\r\n            let matrix_width = ((y(nodelen) - y(0)) / unit)\r\n            this.dayLocation = []\r\n            let location = {}\r\n            let count = 0;\r\n            this.days.forEach(day => {\r\n                if (unfoldDay.includes(day)) {\r\n                    this.dayLocation.push({\r\n                        date: day,\r\n                        location: count,\r\n                    });\r\n                    location[day] = count;\r\n                    count = count + matrix_width + 1;\r\n                } else {\r\n                    this.dayLocation.push({\r\n                        date: day,\r\n                        location: count,\r\n                        // edges:newData[day]\r\n                    });\r\n                    location[day] = count;\r\n                    count = count + 1;\r\n                }\r\n            })\r\n\r\n\r\n\r\n            //修改比例尺\r\n            let degreeThreshold = this.degreeThreshold\r\n            let max = Math.max(...Object.values(node_info).map(item => item.max_value))\r\n            let min = Math.min(...Object.values(node_info).map(item => item.min_value))\r\n            let weightmax = Math.max(...Object.values(node_info).map(item => item.maxStrength2))\r\n            let weightThreshold = threshold * 0.01 * weightmax\r\n            let color = d3.scaleLinear().domain([min, 0.3 * min, 0, max * 0.3, max])\r\n                .range(['#5389c0', '#82a9d1', 'white', '#E09585', '#d2664f']);  \r\n            let posgray = \"#f5dcd6\",\r\n                   neggray = \"#d4e2ef\";   // #dfebec #f5dcd6\r\n              \r\n            let posrect = \" #E09585\",\r\n                negrect = \"#82a9d1\";   // #B1CDD0 #E09585 #6b9ac9 #b6cde4       #82a9d1 #d4e2ef   #e3edee  #99bec2 #c9dcde\r\n            let index_scale = this.index_scale;\r\n            let length = nodelen;\r\n            let T = this.days.length\r\n                //绘制High level\r\n\r\n            let highScale = d3.scaleLinear().domain([0, count]).range([this.margin.left + staNwidth, this.width - this.margin.right]);\r\n            let nodeScale = d3.scaleLinear().domain([0, maxmap * length - 1]).range([0, (y(1) - y(0)) / 2])\r\n\r\n            let mcolor = d3.scaleLinear()\r\n            if (this.dataset === 1) {\r\n                //dataset1 #3e403f #2e4c6d #fed9a6\r\n                mcolor.domain([0.5, 1]).range(['white', '#3e403f'])\r\n            } else if (this.dataset === 3) {\r\n\r\n                //dataset3\r\n                mcolor.domain([0, 10]).range(['white', '#3e403f'])\r\n            }\r\n\r\n\r\n            //绘制视图\r\n            //绘制辅助线条纹背景\r\n            let nodeline = new Array(this.nodes.length).fill(0).map((d, i) => i).filter(d => d % 2 === 0)\r\n            this.svg.selectAll('reck.nodeline')\r\n                .data(nodeline)\r\n                .join('rect')\r\n                .classed('nodeline', true)\r\n                .attr('x', this.margin.left + staNwidth)\r\n                .attr('y', (d, i) => this.y(d - 0.5))\r\n                .attr('width', this.width - this.margin.right - this.margin.left - staNwidth)\r\n                .attr('height', this.y(1) - this.y(0))\r\n                .attr('fill', '#f1f3f5')\r\n            this.svg.selectAll('reck.nodeline0')\r\n                .data(nodeline)\r\n                .join('rect')\r\n                .classed('nodeline0', true)\r\n                .attr('x', 0)\r\n                .attr('y', (d, i) => this.y(d - 0.5))\r\n                .attr('width', staNwidth)\r\n                .attr('height', this.y(1) - this.y(0))\r\n                .attr('fill', '#f1f3f5')\r\n            this.svg.selectAll('reck.nodeline1')\r\n                .data(nodeline)\r\n                .join('rect')\r\n                .classed('nodeline1', true)\r\n                .attr('x', staNwidth+3)\r\n                .attr('y', (d, i) => this.y(d - 0.5))\r\n                .attr('width', this.margin.left-6)\r\n                .attr('height', this.y(1) - this.y(0))\r\n                .attr('fill', '#f1f3f5')\r\n\r\n           //y轴 标签\r\n            if (this.dataset === 1) {\r\n                let industry = this.industry_index2\r\n                this.svg.append('g').attr('class', 'industry')\r\n                    .selectAll(\"text.industry\")\r\n                    .data(this.node_index)\r\n                    .join(\"text\").classed('industry',true)\r\n                    .attr('y', (d, i) => (this.y(d+0.2)))\r\n                    .attr('x', staNwidth + 5 )\r\n                    .text((d,i)=> industry[originInvertIndex(i)])\r\n                    // .text((d, i) => originInvertIndex(i))\r\n                    .attr('font-size', 12)\r\n            } else if (this.dataset === 3) {\r\n                let industry = this.industry_index\r\n                this.svg.append('g').attr('class', 'industry')\r\n                    .selectAll(\"text.industry\")\r\n                    .data(this.node_index)\r\n                    .join(\"text\").classed('industry',true)\r\n                    .attr('y', (d, i) => (this.y(d)))\r\n                    .attr('x', staNwidth + 5)\r\n                    .text((d, i) => industry[originInvertIndex(i)])\r\n                    // .text((d,i)=> originInvertIndex(i))\r\n                    .attr('font-size', 15)\r\n            }\r\n                //绘制时间\r\n            let timelabels = [0, parseInt(T * 0.2), parseInt(T * 0.4), parseInt(T * 0.6), parseInt(T * 0.8)]\r\n            this.svg.selectAll('text.timelabel').data(timelabels)\r\n                .join('text').classed('timelabel', true)\r\n                .attr('y', (d, i) => (this.y(-0.6)))\r\n                .attr('x', d => {\r\n                    return highScale(location[this.days[d]])\r\n                })\r\n                .text((d, i) => this.days[d])\r\n                .attr('font-size', 13)\r\n\r\n            //绘制辅助视图\r\n            //横向直方图\r\n            let staTscale = d3.scaleLinear().domain([maxmap * maxmap * nodelen * (nodelen - 1) / 2, 0]).range([y(-0.5 - nodelen * 0.15), y(-1)])\r\n            this.svg.append('rect')\r\n                        .classed('staT', true)\r\n                        .attr('x', highScale(0))\r\n                        .attr('y', y(-0.5 - nodelen * 0.15))\r\n                        .attr('width', (highScale(count) - highScale(0)))\r\n                        .attr('height', y(-1)-y(-0.5 - nodelen * 0.15))\r\n                        .attr('fill', '#f1f3f5')\r\n            this.svg.selectAll('g.staT')\r\n                .data(highData)\r\n                .join('g').classed('staT', true)\r\n                .each(function(ddd, index) {\r\n\r\n                    let day_index = location[ddd.date]\r\n                        //正边数量\r\n                    d3.select(this).append('rect')\r\n                        .classed('staT', true)\r\n                        .attr('x', highScale(day_index))\r\n                        .attr('y', staTscale(ddd.totalPosEdge+ddd.totalNegEdge))\r\n                        .attr('width', (highScale(1) - highScale(0)))\r\n                        .attr('height', staTscale(0) - staTscale(ddd.totalPosEdge))\r\n                        .attr('fill', posrect)\r\n                        //负边数量\r\n                    d3.select(this).append('rect')\r\n                        .classed('staT', true)\r\n                        .attr('x', highScale(day_index))\r\n                        .attr('y', staTscale(ddd.totalNegEdge))\r\n                        .attr('width', (highScale(1) - highScale(0)))\r\n                        .attr('height', staTscale(0) - staTscale(ddd.totalNegEdge))\r\n                        .attr('fill', negrect)\r\n                })\r\n                //分布图\r\n            let staNscale1 = d3.scaleLinear().domain([0, (nodelen - 1)]).range([staNwidth * 0.5, staNwidth * 0.9])\r\n            let staNscale2 = d3.scaleLinear().domain([(nodelen - 1), 0]).range([staNwidth * 0.1, staNwidth * 0.5])\r\n            let staNdata = Object.values(node_info)\r\n            let maxFre = 0\r\n            staNdata.forEach(item => {\r\n                maxFre = Math.max(maxFre, Math.max(...item.negfrequency), Math.max(...item.posfrequency))\r\n            })\r\n            this.svg.selectAll('g.staN')\r\n                .data(staNdata)\r\n                .join('g').classed('staN', true)\r\n                .each(function(ddd, index) {\r\n                    let localY = d3.scaleLinear().domain([0, maxFre]).range([y(index_scale(ddd.id) + 0.4), y(index_scale(ddd.id) - 0.7)])\r\n\r\n                    // A area generator, for the dark stroke.\r\n                    let area1 = d3.area()\r\n                        .x(function(d, i) { return staNscale1(i); })\r\n                        .y1(function(d, i) { return localY(d); })\r\n                        .y0(localY(0))\r\n                        .curve(d3.curveBasis)\r\n                    let area2 = d3.area()\r\n                        .x(function(d, i) { return staNscale2(i); })\r\n                        .y1(function(d) { return localY(d); })\r\n                        .y0(localY(0))\r\n                        .curve(d3.curveBasis)\r\n\r\n                    // Plot the area\r\n                    d3.select(this).append(\"path\")\r\n                        .attr(\"class\", \"mypath\")\r\n                        .datum(ddd.posfrequency)\r\n                        .attr(\"fill\", posrect)\r\n                        .attr(\"opacity\", \"1\")\r\n                        .attr(\"stroke-linejoin\", \"round\")\r\n                        .attr(\"d\", area1)\r\n                    d3.select(this).append(\"path\")\r\n                        .attr(\"class\", \"mypath\")\r\n                        .datum(ddd.negfrequency)\r\n                        .attr(\"fill\", negrect)\r\n                        .attr(\"opacity\", \"1\")\r\n                        .attr(\"stroke-linejoin\", \"round\")\r\n                        .attr(\"d\", area2)\r\n                })\r\n\r\n\r\n            //绘制kelp diagram\r\n            let Vgap = y(1) - y(0),\r\n                Hgap = highScale(1) - highScale(0);\r\n            if (kelpSwitch) {\r\n                let posline = [];\r\n                let negline = [];\r\n                let negPath = [];\r\n                let posPath = [];\r\n                if (colorSwitch) {\r\n                    let kelpCenterData = highData.filter((item, index) => {\r\n                        return item.nodes.filter(({ strength2 }) => strength2 > weightThreshold).length > 0;\r\n                    })\r\n                    kelpCenterData.forEach((item, index) => {\r\n                            let set = item.nodes.filter(({ strength2 }) => strength2 > weightThreshold).sort((a, b) => index_scale(a.id) - index_scale(b.id))\r\n                            let posbridgeSet = set.filter((node) => node.type2 === \"pos\").sort((a, b) => index_scale(a.id) - index_scale(b.id));\r\n                            let bridgeSet = set.filter((node) => node.type2 === 'neg').sort((a, b) => index_scale(a.id) - index_scale(b.id));\r\n\r\n                            //绘制posbridge\r\n                            let posbridgeLen = posbridgeSet.length;\r\n                            if (posbridgeLen > 0) {\r\n                                // if(!msvSwitch){\r\n                                posbridgeSet.forEach((node, i) => {\r\n                                    posPath.push({\r\n                                        date: item.date,\r\n                                        d: `M ${highScale(location[item.date]+0.9)},${y(index_scale(node.id)-0.4)} A${Hgap*0.4},${Vgap*0.1} 0 0,0 ${highScale(location[item.date])},${y(index_scale(node.id)-0.4)} v${Vgap*0.8} A${Hgap*0.4},${Vgap*0.1} 0 0,0 ${highScale(location[item.date]+0.9)},${y(index_scale(node.id)+0.4)} z`\r\n                                    })\r\n                                })\r\n                                posPath.push({\r\n                                        date: item.date,\r\n                                        d: `M ${highScale(location[item.date])},${y(index_scale(posbridgeSet[0].id))} h${Hgap*0.2} L ${highScale(location[item.date]+0.2)},${y(index_scale(posbridgeSet[posbridgeLen-1].id))} h${-Hgap*0.2} z`\r\n                                    })\r\n                                    // }\r\n\r\n                            }\r\n\r\n                            //绘制bridge\r\n                            let bridgeLen = bridgeSet.length;\r\n                            if (bridgeLen > 0) {\r\n                                // if(!msvSwitch){\r\n                                bridgeSet.forEach((node, i) => {\r\n                                    negPath.push({\r\n                                        date: item.date,\r\n                                        d: `M ${highScale(location[item.date]+1)},${y(index_scale(node.id)-0.4)} A${Hgap*0.4},${Vgap*0.1} 0 0,0 ${highScale(location[item.date]+0.1)},${y(index_scale(node.id)-0.4)} v${Vgap*0.8} A${Hgap*0.4},${Vgap*0.1} 0 0,0 ${highScale(location[item.date]+1)},${y(index_scale(node.id)+0.4)} z`\r\n                                    })\r\n                                })\r\n                                negPath.push({\r\n                                        date: item.date,\r\n                                        d: `M ${highScale(location[item.date]+0.8)},${y(index_scale(bridgeSet[0].id))} h${Hgap*0.2} L ${highScale(location[item.date]+1)},${y(index_scale(bridgeSet[bridgeLen-1].id))} h${-Hgap*0.2} z`\r\n                                    })\r\n                                    // }\r\n\r\n                            }\r\n                        })\r\n                        //计算两天之间的连接\r\n                    for (let i = 0; i < kelpCenterData.length - 1; i++) {\r\n                        let distance = (location[kelpCenterData[i + 1].date] - location[kelpCenterData[i].date])\r\n                        if (distance > 0 && distance < 10) {\r\n                            let set1 = kelpCenterData[i].nodes.filter(({ strength2 }) => strength2 > weightThreshold).sort((a, b) => index_scale(a.id) - index_scale(b.id))\r\n                            let set2 = kelpCenterData[i + 1].nodes.filter(({ strength2 }) => strength2 > weightThreshold).sort((a, b) => index_scale(a.id) - index_scale(b.id))\r\n                            let posNodes1 = set1.filter((node) => node.type2 === 'pos') //左边绿的\r\n                            let negNodes1 = set1.filter((node) => node.type2 === 'neg') //左边红的\r\n                            let posNodes2 = set2.filter((node) => node.type2 === 'pos') //右边绿的\r\n                            let negNodes2 = set2.filter((node) => node.type2 === 'neg') //右边红的\r\n\r\n\r\n                            let ifOverlap = false //是否有重叠\r\n                            let posEdge = [],\r\n                                negEdge = []; //红边绿边\r\n                            set1.forEach((a) => {\r\n                                    let set2Has = set2.forEach((b) => {\r\n                                        let Has = a.id === b.id;\r\n                                        if (Has) { //如果重叠了\r\n                                            ifOverlap = true;\r\n                                            let active1 = a.type2 === 'pos' ? true : false;\r\n                                            let active2 = b.type2 === 'pos' ? true : false;\r\n\r\n\r\n                                            if (active1 && active2) { //都是绿的连粗的绿的\r\n                                                posPath.push({\r\n                                                    date1: kelpCenterData[i].date,\r\n                                                    date2: kelpCenterData[i + 1].date,\r\n                                                    d: `M ${highScale(location[kelpCenterData[i].date]+0.5)},${y(index_scale(a.id)-0.3)} v${Vgap*0.6} L ${highScale(location[kelpCenterData[i+1].date]+0.5)},${y(index_scale(b.id)+0.3)} v${-Vgap*0.6} z`\r\n                                                })\r\n                                                posEdge.push(a); //绿边放进来\r\n                                            } else if (!active1 && !active2) { //都是红的连粗的红的\r\n                                                negPath.push({\r\n                                                    date1: kelpCenterData[i].date,\r\n                                                    date2: kelpCenterData[i + 1].date,\r\n                                                    d: `M ${highScale(location[kelpCenterData[i].date]+0.5)},${y(index_scale(a.id)-0.3)} v${Vgap*0.6} L ${highScale(location[kelpCenterData[i+1].date]+0.5)},${y(index_scale(b.id)+0.3)} v${-Vgap*0.6} z`\r\n                                                })\r\n                                                negEdge.push(a) //红边放进来\r\n\r\n                                            } else { //左右颜色不一样\r\n                                                if (posNodes1.length > 0 && posNodes2.length > 0) { //如果左右都有绿的\r\n                                                    posPath.push({\r\n                                                        date1: kelpCenterData[i].date,\r\n                                                        date2: kelpCenterData[i + 1].date,\r\n                                                        d: `M ${highScale(location[kelpCenterData[i].date]+0.8)},${y(index_scale(a.id)-0.3)} v${Vgap*0.3} L ${highScale(location[kelpCenterData[i+1].date]+0.2)},${y(index_scale(b.id))} v${-Vgap*0.3} z`\r\n                                                    })\r\n                                                    posEdge.push(a); //绿边放进来\r\n                                                }\r\n                                                if (negNodes1.length > 0 && negNodes2.length > 0) {\r\n                                                    negPath.push({\r\n                                                        date1: kelpCenterData[i].date,\r\n                                                        date2: kelpCenterData[i + 1].date,\r\n                                                        d: `M ${highScale(location[kelpCenterData[i].date]+0.8)},${y(index_scale(a.id))} v${Vgap*0.3} L ${highScale(location[kelpCenterData[i+1].date]+0.2)},${y(index_scale(b.id)+0.3)} v${-Vgap*0.3} z`\r\n                                                    })\r\n                                                    negEdge.push(a) //红边放进来\r\n                                                }\r\n                                            }\r\n\r\n\r\n                                        }\r\n                                    })\r\n                                    return set2Has\r\n                                })\r\n                                //有重叠连线\r\n\r\n                            let negMix = [...negEdge, ...negNodes1].sort((a, b) => index_scale(a.id) - index_scale(b.id));\r\n                            if (negEdge.length > 0) {\r\n                                negPath.push({\r\n                                    date: kelpCenterData[i].date,\r\n                                    d: `M ${highScale(location[kelpCenterData[i].date]+0.8)},${y(index_scale(negMix[0].id))} h${Hgap*0.2} L ${highScale(location[kelpCenterData[i].date]+1)},${y(index_scale(negMix[negMix.length-1].id))} h${-Hgap*0.2} z`\r\n                                })\r\n                            }\r\n                            let posMix = [...posEdge, ...posNodes2].sort((a, b) => index_scale(a.id) - index_scale(b.id));\r\n                            if (posEdge.length > 0) {\r\n                                posPath.push({\r\n                                    date: kelpCenterData[i + 1].date,\r\n                                    d: `M ${highScale(location[kelpCenterData[i+1].date])},${y(index_scale(posMix[0].id))} h${Hgap*0.2} L ${highScale(location[kelpCenterData[i+1].date]+0.2)},${y(index_scale(posMix[posMix.length-1].id))} h${-Hgap*0.2} z`\r\n                                })\r\n                            }\r\n\r\n\r\n\r\n                            if (!ifOverlap) { //没有重叠\r\n                                if (posNodes1.length > 0 && posNodes2.length > 0) { //左右都有绿色\r\n                                    let initpos = [0, 0]\r\n                                    let maxdist = nodelen - 1;\r\n                                    for (let index1 = 0; index1 < posNodes1.length; index1++) {\r\n                                        if (maxdist < 2) {\r\n                                            break;\r\n                                        }\r\n                                        for (let index2 = 0; index2 < posNodes2.length; index2++) {\r\n                                            let dist = Math.abs(index_scale(posNodes1[index1].id) - index_scale(posNodes2[index2].id))\r\n                                            if (dist < 2) {\r\n                                                maxdist = dist;\r\n                                                initpos = [index1, index2];\r\n                                                break;\r\n                                            } else if (dist < maxdist) {\r\n                                                maxdist = dist\r\n                                                initpos = [index1, index2];\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    if (index_scale(posNodes1[initpos[0]].id) > index_scale(posNodes2[initpos[1]].id)) {\r\n                                        posline.push({\r\n                                            date1: kelpCenterData[i].date,\r\n                                            date2: kelpCenterData[i + 1].date,\r\n                                            x1: highScale(location[kelpCenterData[i].date] + 0.7),\r\n                                            x2: highScale(location[kelpCenterData[i + 1].date] + 0.1),\r\n                                            y1: y(index_scale(posNodes1[initpos[0]].id) - 0.3),\r\n                                            y2: y(index_scale(posNodes2[initpos[1]].id) + 0.3),\r\n                                        })\r\n                                    } else {\r\n                                        posline.push({\r\n                                            date1: kelpCenterData[i].date,\r\n                                            date2: kelpCenterData[i + 1].date,\r\n                                            x1: highScale(location[kelpCenterData[i].date] + 0.7),\r\n                                            x2: highScale(location[kelpCenterData[i + 1].date] + 0.1),\r\n                                            y1: y(index_scale(posNodes1[initpos[0]].id) + 0.3),\r\n                                            y2: y(index_scale(posNodes2[initpos[1]].id) - 0.3),\r\n                                        })\r\n                                    }\r\n\r\n                                }\r\n\r\n                                if (negNodes1.length > 0 && negNodes2.length > 0) { //左右都有红色\r\n                                    let initpos = [0, 0]\r\n                                    let maxdist = nodelen - 1;\r\n                                    for (let index1 = 0; index1 < negNodes1.length; index1++) {\r\n                                        if (maxdist < 2) {\r\n                                            break;\r\n                                        }\r\n                                        for (let index2 = 0; index2 < negNodes2.length; index2++) {\r\n                                            let dist = Math.abs(index_scale(negNodes1[index1].id) - index_scale(negNodes2[index2].id))\r\n                                            if (dist < 2) {\r\n                                                maxdist = dist;\r\n                                                initpos = [index1, index2];\r\n                                                break;\r\n                                            } else if (dist < maxdist) {\r\n                                                maxdist = dist\r\n                                                initpos = [index1, index2];\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                    if (index_scale(negNodes1[initpos[0]].id) > index_scale(negNodes2[initpos[1]].id)) {\r\n                                        negline.push({\r\n                                            date1: kelpCenterData[i].date,\r\n                                            date2: kelpCenterData[i + 1].date,\r\n                                            x1: highScale(location[kelpCenterData[i].date] + 0.9),\r\n                                            x2: highScale(location[kelpCenterData[i + 1].date] + 0.3),\r\n                                            y1: y(index_scale(negNodes1[initpos[0]].id) - 0.3),\r\n                                            y2: y(index_scale(negNodes2[initpos[1]].id) + 0.3),\r\n                                        })\r\n                                    } else {\r\n                                        negline.push({\r\n                                            date1: kelpCenterData[i].date,\r\n                                            date2: kelpCenterData[i + 1].date,\r\n                                            x1: highScale(location[kelpCenterData[i].date] + 0.9),\r\n                                            x2: highScale(location[kelpCenterData[i + 1].date] + 0.3),\r\n                                            y1: y(index_scale(negNodes1[initpos[0]].id) + 0.3),\r\n                                            y2: y(index_scale(negNodes2[initpos[1]].id) - 0.3),\r\n                                        })\r\n                                    }\r\n\r\n\r\n                                }\r\n\r\n                            }\r\n                        }\r\n\r\n\r\n                    }\r\n                    let kelpOpacity = 1\r\n                        //posline\r\n                    this.svg.selectAll('line.posline')\r\n                        .data(posline)\r\n                        .join('line')\r\n                        .classed('kelp', true)\r\n                        .classed('posline', true)\r\n                        .attr('x1', d => d.x1)\r\n                        .attr('y1', d => d.y1)\r\n                        .attr('x2', d => d.x2)\r\n                        .attr('y2', d => d.y2)\r\n                        .attr('stroke', msvSwitch ? posgray : posrect)\r\n                        .attr('stroke-width', Math.min(Hgap, Vgap) * 0.2)\r\n                        .attr('opacity', kelpOpacity)\r\n                        //negline\r\n                    this.svg.selectAll('line.negline')\r\n                        .data(negline)\r\n                        .join('line')\r\n                        .classed('kelp', true)\r\n                        .classed('negline', true)\r\n                        .attr('x1', d => d.x1)\r\n                        .attr('y1', d => d.y1)\r\n                        .attr('x2', d => d.x2)\r\n                        .attr('y2', d => d.y2)\r\n                        .attr('stroke', msvSwitch ? neggray : negrect)\r\n                        .attr('stroke-width', Math.min(Hgap, Vgap) * 0.2)\r\n                        .attr('opacity', kelpOpacity)\r\n                        //neg-path\r\n                    this.svg.selectAll('path.kelpnp')\r\n                        .data(negPath)\r\n                        .join('path')\r\n                        .classed('kelp', true)\r\n                        .classed('kelpnp', true)\r\n                        .attr('d', d => d.d)\r\n                        .attr('fill', msvSwitch ? neggray : negrect)\r\n                        .attr('opacity', kelpOpacity)\r\n                        .attr(\"stroke-width\", 1)\r\n                        //pos-path\r\n                    this.svg.selectAll('path.kelppp')\r\n                        .data(posPath)\r\n                        .join('path')\r\n                        .classed('kelp', true)\r\n                        .classed('kelppp', true)\r\n                        .attr('d', d => d.d)\r\n                        .attr('fill', msvSwitch ? posgray : posrect)\r\n                        .attr('opacity', kelpOpacity)\r\n\r\n                    //绘制光圈\r\n                    if (!msvSwitch) {\r\n                        let lightData = []\r\n                        let lightStream = kelpCenterData\r\n                        lightStream.forEach((item => {\r\n                            item.nodes.filter(item => item.strength2 > weightThreshold).forEach((node) => {\r\n                                lightData.push({\r\n                                    id: node.id,\r\n                                    color: node.totalposvalue - Math.abs(node.totalnegvalue) >= 0 ? '#d2664f' : '#5389c0',\r\n                                    date: item.date,\r\n                                })\r\n                            })\r\n                        }))\r\n                        this.svg.selectAll('circle.light')\r\n                            .data(lightData)\r\n                            .join('circle')\r\n                            .classed('light', true)\r\n                            .attr('cx', d => highScale(location[d.date] + 0.5))\r\n                            .attr('cy', d => (y(index_scale(d.id))))\r\n                            .attr('r', Math.min(Hgap, Vgap) * 0.2)\r\n                            .attr('fill', d => d.color)\r\n                            .attr('opacity', kelpOpacity)\r\n                    }\r\n                } else {\r\n                    let kelpCenterData = highData.filter((item, index) => {\r\n                        return item.nodes.filter(({ strength }) => strength > degreeThreshold).length > 0;\r\n                    })\r\n                    kelpCenterData.forEach((item, index) => {\r\n                            let set = item.nodes.filter(({ strength }) => strength > degreeThreshold).sort((a, b) => index_scale(a.id) - index_scale(b.id))\r\n                            let posbridgeSet = set.filter((node) => node.type === \"pos\").sort((a, b) => index_scale(a.id) - index_scale(b.id));\r\n                            let bridgeSet = set.filter((node) => node.type === 'neg').sort((a, b) => index_scale(a.id) - index_scale(b.id));\r\n\r\n                            //绘制posbridge\r\n                            let posbridgeLen = posbridgeSet.length;\r\n                            if (posbridgeLen > 0) {\r\n                                // if(!msvSwitch){\r\n                                posbridgeSet.forEach((node, i) => {\r\n                                    posPath.push({\r\n                                        date: item.date,\r\n                                        d: `M ${highScale(location[item.date]+0.9)},${y(index_scale(node.id)-0.4)} A${Hgap*0.4},${Vgap*0.1} 0 0,0 ${highScale(location[item.date])},${y(index_scale(node.id)-0.4)} v${Vgap*0.8} A${Hgap*0.4},${Vgap*0.1} 0 0,0 ${highScale(location[item.date]+0.9)},${y(index_scale(node.id)+0.4)} z`\r\n                                    })\r\n                                })\r\n                                posPath.push({\r\n                                        date: item.date,\r\n                                        d: `M ${highScale(location[item.date])},${y(index_scale(posbridgeSet[0].id))} h${Hgap*0.2} L ${highScale(location[item.date]+0.2)},${y(index_scale(posbridgeSet[posbridgeLen-1].id))} h${-Hgap*0.2} z`\r\n                                    })\r\n                                    // }\r\n\r\n                            }\r\n\r\n                            //绘制bridge\r\n                            let bridgeLen = bridgeSet.length;\r\n                            if (bridgeLen > 0) {\r\n                                // if(!msvSwitch){\r\n                                bridgeSet.forEach((node, i) => {\r\n                                    negPath.push({\r\n                                        date: item.date,\r\n                                        d: `M ${highScale(location[item.date]+1)},${y(index_scale(node.id)-0.4)} A${Hgap*0.4},${Vgap*0.1} 0 0,0 ${highScale(location[item.date]+0.1)},${y(index_scale(node.id)-0.4)} v${Vgap*0.8} A${Hgap*0.4},${Vgap*0.1} 0 0,0 ${highScale(location[item.date]+1)},${y(index_scale(node.id)+0.4)} z`\r\n                                    })\r\n                                })\r\n                                negPath.push({\r\n                                        date: item.date,\r\n                                        d: `M ${highScale(location[item.date]+0.8)},${y(index_scale(bridgeSet[0].id))} h${Hgap*0.2} L ${highScale(location[item.date]+1)},${y(index_scale(bridgeSet[bridgeLen-1].id))} h${-Hgap*0.2} z`\r\n                                    })\r\n                                    // }\r\n\r\n                            }\r\n                        })\r\n                        //计算两天之间的连接\r\n                    for (let i = 0; i < kelpCenterData.length - 1; i++) {\r\n                        let distance = (location[kelpCenterData[i + 1].date] - location[kelpCenterData[i].date])\r\n                        if (distance > 0 && distance < 15) {\r\n                            let set1 = kelpCenterData[i].nodes.filter(({ strength }) => strength > degreeThreshold).sort((a, b) => index_scale(a.id) - index_scale(b.id))\r\n                            let set2 = kelpCenterData[i + 1].nodes.filter(({ strength }) => strength > degreeThreshold).sort((a, b) => index_scale(a.id) - index_scale(b.id))\r\n                            let posNodes1 = set1.filter((node) => node.type === 'pos') //左边绿的\r\n                            let negNodes1 = set1.filter((node) => node.type === 'neg') //左边红的\r\n                            let posNodes2 = set2.filter((node) => node.type === 'pos') //右边绿的\r\n                            let negNodes2 = set2.filter((node) => node.type === 'neg') //右边红的\r\n\r\n                            let ifOverlap = false //是否有重叠\r\n                            let posEdge = [],\r\n                                negEdge = []; //红边绿边\r\n                            set1.forEach((a) => {\r\n                                    let set2Has = set2.forEach((b) => {\r\n                                        let Has = a.id === b.id;\r\n                                        if (Has) { //如果重叠了\r\n                                            ifOverlap = true;\r\n                                            let active1 = a.type === 'pos' ? true : false;\r\n                                            let active2 = b.type === 'pos' ? true : false;\r\n\r\n                                            if (active1 && active2) { //都是绿的连粗的绿的\r\n                                                posPath.push({\r\n                                                    date1: kelpCenterData[i].date,\r\n                                                    date2: kelpCenterData[i + 1].date,\r\n                                                    d: `M ${highScale(location[kelpCenterData[i].date]+0.5)},${y(index_scale(a.id)-0.3)} v${Vgap*0.6} L ${highScale(location[kelpCenterData[i+1].date]+0.5)},${y(index_scale(b.id)+0.3)} v${-Vgap*0.6} z`\r\n                                                })\r\n                                                posEdge.push(a); //绿边放进来\r\n                                            } else if (!active1 && !active2) { //都是红的连粗的红的\r\n                                                negPath.push({\r\n                                                    date1: kelpCenterData[i].date,\r\n                                                    date2: kelpCenterData[i + 1].date,\r\n                                                    d: `M ${highScale(location[kelpCenterData[i].date]+0.5)},${y(index_scale(a.id)-0.3)} v${Vgap*0.6} L ${highScale(location[kelpCenterData[i+1].date]+0.5)},${y(index_scale(b.id)+0.3)} v${-Vgap*0.6} z`\r\n                                                })\r\n                                                negEdge.push(a) //红边放进来\r\n\r\n                                            } else { //左右颜色不一样\r\n                                                if (posNodes1.length > 0 && posNodes2.length > 0) { //如果左右都有绿的\r\n                                                    posPath.push({\r\n                                                        date1: kelpCenterData[i].date,\r\n                                                        date2: kelpCenterData[i + 1].date,\r\n                                                        d: `M ${highScale(location[kelpCenterData[i].date]+0.8)},${y(index_scale(a.id)-0.3)} v${Vgap*0.3} L ${highScale(location[kelpCenterData[i+1].date]+0.2)},${y(index_scale(b.id))} v${-Vgap*0.3} z`\r\n                                                    })\r\n                                                    posEdge.push(a); //绿边放进来\r\n                                                }\r\n                                                if (negNodes1.length > 0 && negNodes2.length > 0) {\r\n                                                    negPath.push({\r\n                                                        date1: kelpCenterData[i].date,\r\n                                                        date2: kelpCenterData[i + 1].date,\r\n                                                        d: `M ${highScale(location[kelpCenterData[i].date]+0.8)},${y(index_scale(a.id))} v${Vgap*0.3} L ${highScale(location[kelpCenterData[i+1].date]+0.2)},${y(index_scale(b.id)+0.3)} v${-Vgap*0.3} z`\r\n                                                    })\r\n                                                    negEdge.push(a) //红边放进来\r\n                                                }\r\n                                            }\r\n\r\n\r\n                                        }\r\n                                    })\r\n                                    return set2Has\r\n                                })\r\n                                //有重叠连线\r\n\r\n                            let negMix = [...negEdge, ...negNodes1].sort((a, b) => index_scale(a.id) - index_scale(b.id));\r\n                            if (negEdge.length > 0) {\r\n                                negPath.push({\r\n                                    date: kelpCenterData[i].date,\r\n                                    d: `M ${highScale(location[kelpCenterData[i].date]+0.8)},${y(index_scale(negMix[0].id))} h${Hgap*0.2} L ${highScale(location[kelpCenterData[i].date]+1)},${y(index_scale(negMix[negMix.length-1].id))} h${-Hgap*0.2} z`\r\n                                })\r\n                            }\r\n                            let posMix = [...posEdge, ...posNodes2].sort((a, b) => index_scale(a.id) - index_scale(b.id));\r\n                            if (posEdge.length > 0) {\r\n                                posPath.push({\r\n                                    date: kelpCenterData[i + 1].date,\r\n                                    d: `M ${highScale(location[kelpCenterData[i+1].date])},${y(index_scale(posMix[0].id))} h${Hgap*0.2} L ${highScale(location[kelpCenterData[i+1].date]+0.2)},${y(index_scale(posMix[posMix.length-1].id))} h${-Hgap*0.2} z`\r\n                                })\r\n                            }\r\n\r\n\r\n\r\n                            if (!ifOverlap) { //没有重叠\r\n                                if (posNodes1.length > 0 && posNodes2.length > 0) { //左右都有绿色\r\n                                    let initpos = [0, 0]\r\n                                    let maxdist = nodelen - 1;\r\n                                    for (let index1 = 0; index1 < posNodes1.length; index1++) {\r\n                                        if (maxdist < 2) {\r\n                                            break;\r\n                                        }\r\n                                        for (let index2 = 0; index2 < posNodes2.length; index2++) {\r\n                                            let dist = Math.abs(index_scale(posNodes1[index1].id) - index_scale(posNodes2[index2].id))\r\n                                            if (dist < 2) {\r\n                                                maxdist = dist;\r\n                                                initpos = [index1, index2];\r\n                                                break;\r\n                                            } else if (dist < maxdist) {\r\n                                                maxdist = dist\r\n                                                initpos = [index1, index2];\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    if (index_scale(posNodes1[initpos[0]].id) > index_scale(posNodes2[initpos[1]].id)) {\r\n                                        posline.push({\r\n                                            date1: kelpCenterData[i].date,\r\n                                            date2: kelpCenterData[i + 1].date,\r\n                                            x1: highScale(location[kelpCenterData[i].date] + 0.7),\r\n                                            x2: highScale(location[kelpCenterData[i + 1].date] + 0.1),\r\n                                            y1: y(index_scale(posNodes1[initpos[0]].id) - 0.3),\r\n                                            y2: y(index_scale(posNodes2[initpos[1]].id) + 0.3),\r\n                                        })\r\n                                    } else {\r\n                                        posline.push({\r\n                                            date1: kelpCenterData[i].date,\r\n                                            date2: kelpCenterData[i + 1].date,\r\n                                            x1: highScale(location[kelpCenterData[i].date] + 0.7),\r\n                                            x2: highScale(location[kelpCenterData[i + 1].date] + 0.1),\r\n                                            y1: y(index_scale(posNodes1[initpos[0]].id) + 0.3),\r\n                                            y2: y(index_scale(posNodes2[initpos[1]].id) - 0.3),\r\n                                        })\r\n                                    }\r\n\r\n                                }\r\n\r\n                                if (negNodes1.length > 0 && negNodes2.length > 0) { //左右都有红色\r\n                                    let initpos = [0, 0]\r\n                                    let maxdist = nodelen - 1;\r\n                                    for (let index1 = 0; index1 < negNodes1.length; index1++) {\r\n                                        if (maxdist < 2) {\r\n                                            break;\r\n                                        }\r\n                                        for (let index2 = 0; index2 < negNodes2.length; index2++) {\r\n                                            let dist = Math.abs(index_scale(negNodes1[index1].id) - index_scale(negNodes2[index2].id))\r\n                                            if (dist < 2) {\r\n                                                maxdist = dist;\r\n                                                initpos = [index1, index2];\r\n                                                break;\r\n                                            } else if (dist < maxdist) {\r\n                                                maxdist = dist\r\n                                                initpos = [index1, index2];\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                    if (index_scale(negNodes1[initpos[0]].id) > index_scale(negNodes2[initpos[1]].id)) {\r\n                                        negline.push({\r\n                                            date1: kelpCenterData[i].date,\r\n                                            date2: kelpCenterData[i + 1].date,\r\n                                            x1: highScale(location[kelpCenterData[i].date] + 0.9),\r\n                                            x2: highScale(location[kelpCenterData[i + 1].date] + 0.3),\r\n                                            y1: y(index_scale(negNodes1[initpos[0]].id) - 0.3),\r\n                                            y2: y(index_scale(negNodes2[initpos[1]].id) + 0.3),\r\n                                        })\r\n                                    } else {\r\n                                        negline.push({\r\n                                            date1: kelpCenterData[i].date,\r\n                                            date2: kelpCenterData[i + 1].date,\r\n                                            x1: highScale(location[kelpCenterData[i].date] + 0.9),\r\n                                            x2: highScale(location[kelpCenterData[i + 1].date] + 0.3),\r\n                                            y1: y(index_scale(negNodes1[initpos[0]].id) + 0.3),\r\n                                            y2: y(index_scale(negNodes2[initpos[1]].id) - 0.3),\r\n                                        })\r\n                                    }\r\n\r\n\r\n                                }\r\n\r\n                            }\r\n                        }\r\n\r\n\r\n                    }\r\n                    let kelpOpacity = 1\r\n                        //posline\r\n                    this.svg.selectAll('line.posline')\r\n                        .data(posline)\r\n                        .join('line')\r\n                        .classed('kelp', true)\r\n                        .classed('posline', true)\r\n                        .attr('x1', d => d.x1)\r\n                        .attr('y1', d => d.y1)\r\n                        .attr('x2', d => d.x2)\r\n                        .attr('y2', d => d.y2)\r\n                        .attr('stroke', msvSwitch ? posgray : posrect)\r\n                        .attr('stroke-width', Math.min(Hgap, Vgap) * 0.2)\r\n                        .attr('opacity', kelpOpacity)\r\n                        //negline\r\n                    this.svg.selectAll('line.negline')\r\n                        .data(negline)\r\n                        .join('line')\r\n                        .classed('kelp', true)\r\n                        .classed('negline', true)\r\n                        .attr('x1', d => d.x1)\r\n                        .attr('y1', d => d.y1)\r\n                        .attr('x2', d => d.x2)\r\n                        .attr('y2', d => d.y2)\r\n                        .attr('stroke', msvSwitch ? neggray : negrect)\r\n                        .attr('stroke-width', Math.min(Hgap, Vgap) * 0.2)\r\n                        .attr('opacity', kelpOpacity)\r\n                        //neg-path\r\n                    this.svg.selectAll('path.kelpnp')\r\n                        .data(negPath)\r\n                        .join('path')\r\n                        .classed('kelp', true)\r\n                        .classed('kelpnp', true)\r\n                        .attr('d', d => d.d)\r\n                        .attr('fill', msvSwitch ? neggray : negrect)\r\n                        .attr('opacity', kelpOpacity)\r\n                        .attr(\"stroke-width\", 1)\r\n                        //pos-path\r\n                    this.svg.selectAll('path.kelppp')\r\n                        .data(posPath)\r\n                        .join('path')\r\n                        .classed('kelp', true)\r\n                        .classed('kelppp', true)\r\n                        .attr('d', d => d.d)\r\n                        .attr('fill', msvSwitch ? posgray : posrect)\r\n                        .attr('opacity', kelpOpacity)\r\n\r\n                    //绘制光圈\r\n                    if (!msvSwitch) {\r\n                        let lightData = []\r\n                        let lightStream = kelpCenterData\r\n                        lightStream.forEach((item => {\r\n                            item.nodes.filter(item => item.strength > degreeThreshold).forEach((node) => {\r\n                                lightData.push({\r\n                                    id: node.id,\r\n                                    color: node.posdegree - node.negdegree >= 0 ? '#d2664f' : '#5389c0',\r\n                                    date: item.date,\r\n                                })\r\n                            })\r\n                        }))\r\n                        this.svg.selectAll('circle.light')\r\n                            .data(lightData)\r\n                            .join('circle')\r\n                            .classed('light', true)\r\n                            .attr('cx', d => highScale(location[d.date] + 0.5))\r\n                            .attr('cy', d => (y(index_scale(d.id))))\r\n                            .attr('r', Math.min(Hgap, Vgap) * 0.2)\r\n                            .attr('fill', d => d.color)\r\n                            .attr('opacity', kelpOpacity)\r\n                    }\r\n                }\r\n\r\n\r\n\r\n            }\r\n            if (msvSwitch) {\r\n                //矩阵\r\n                let matrices = mdata.filter(({ date }) => unfoldDay.includes(date));\r\n                matrices.forEach(matrix => {\r\n                    if (unfoldDiff.includes(matrix.date)) {\r\n                        let diffRows = diffdata.filter(({ date }) => date === matrix.date)[0].cell\r\n                        let diffData = [];\r\n                        diffRows.forEach((row, rowindex) => {\r\n                            row.forEach((cell, cellindex) => {\r\n                                diffData.push({\r\n                                    source: originInvertIndex(cellindex),\r\n                                    target: originInvertIndex(rowindex),\r\n                                    value: cell\r\n                                })\r\n                            })\r\n                        })\r\n                        this.svg.append('g').attr('class', 'matrix' + matrix.date).classed('matrix', true).selectAll('rect.diffmatrix')\r\n                            .data(diffData)\r\n                            .join('rect')\r\n                            .attr(\"class\", d => 'node' + d.target)\r\n                            .classed('diffmatrix', true)\r\n                            .classed('matrix', true)\r\n                            .attr(\"y\", d => y(index_scale(d.target) - 0.5))\r\n                            .attr(\"x\", d => highScale(location[matrix.date] + 1) + index_scale(d.source) * (y(1) - y(0)))\r\n                            .attr(\"height\", (y(1) - y(0)))\r\n                            .attr(\"width\", y(1) - y(0))\r\n                            .attr('id', d => index_scale(d.source))\r\n                            .attr('fill', d => color(d.value))\r\n                            .attr(\"stroke\", '#e1e3e6')\r\n                            .attr('opacity', 1)\r\n                            .on('click', function(event) {\r\n                                d3.selectAll('rect.neg-node').attr(\"opacity\", '0.1')\r\n                                d3.selectAll('rect.pos-node').attr(\"opacity\", '0.1')\r\n                                d3.selectAll('rect.diffmatrix').attr(\"opacity\", '0.1')\r\n                                d3.selectAll('rect.matrix').attr(\"opacity\", '0.1')\r\n                                let celldata = d3.select(this).data()\r\n\r\n                                d3.selectAll(\".node\" + celldata[0].source).attr(\"opacity\", '1')\r\n                                d3.selectAll(\".node\" + celldata[0].target).attr(\"opacity\", '1')\r\n                                    // d3.selectAll('rect.MSV-edge').attr('opacity','0')\r\n\r\n                                // d3.selectAll('.kelp').attr(\"opacity\",'0')\r\n\r\n\r\n                            })\r\n                            .on(\"mouseout\", function(event) {\r\n                                d3.selectAll('rect.neg-node').attr(\"opacity\", '1')\r\n                                d3.selectAll('rect.pos-node').attr(\"opacity\", '1')\r\n                                d3.selectAll('.arc').remove()\r\n                                d3.selectAll('rect.MSV-edge').attr('opacity', '1')\r\n\r\n                                d3.selectAll('rect.diffmatrix').attr(\"opacity\", '1')\r\n                                d3.selectAll('rect.matrix').attr(\"opacity\", '1')\r\n\r\n                                // d3.selectAll('.kelp').attr(\"opacity\",'0.8')\r\n                            })\r\n                    } else {\r\n                        //原图展开\r\n                        let matrixData = [];\r\n                        matrix.cell.forEach((row, rowindex) => {\r\n                            row.forEach((cell, cellindex) => {\r\n                                matrixData.push({\r\n                                    source: originInvertIndex(cellindex),\r\n                                    target: originInvertIndex(rowindex),\r\n                                    value: cell\r\n                                })\r\n                            })\r\n                        })\r\n                        this.svg.append('g').attr('class', 'matrix' + matrix.date).classed('matrix', true).selectAll('rect.matrix')\r\n                            .data(matrixData)\r\n                            .join('rect')\r\n                            .attr(\"class\", d => 'node' + d.target)\r\n                            .classed('matrix', true)\r\n                            .attr(\"y\", d => y(index_scale(d.target) - 0.5))\r\n                            .attr(\"x\", d => highScale(location[matrix.date] + 1) + index_scale(d.source) * (y(1) - y(0)))\r\n                            .attr(\"height\", (y(1) - y(0)))\r\n                            .attr(\"width\", y(1) - y(0))\r\n                            .attr('id', d => index_scale(d.source))\r\n                            .attr('fill', d => d.target === d.source ? 'white' : mcolor(d.value))\r\n                            .attr(\"stroke\", '#e1e3e6')\r\n                            .attr('opacity', 1)\r\n                            .on('click', function(event) {\r\n                                d3.selectAll('rect.neg-node').attr(\"opacity\", '0.1')\r\n                                d3.selectAll('rect.pos-node').attr(\"opacity\", '0.1')\r\n                                d3.selectAll('rect.diffmatrix').attr(\"opacity\", '0.1')\r\n                                d3.selectAll('rect.matrix').attr(\"opacity\", '0.1')\r\n                                let celldata = d3.select(this).data()\r\n\r\n                                d3.selectAll(\".node\" + celldata[0].source).attr(\"opacity\", '1')\r\n                                d3.selectAll(\".node\" + celldata[0].target).attr(\"opacity\", '1')\r\n                                    // d3.selectAll('rect.MSV-edge').attr('opacity','0')\r\n\r\n                                // d3.selectAll('.kelp').attr(\"opacity\",'0')\r\n\r\n\r\n                            })\r\n                            .on(\"mouseout\", function(event) {\r\n                                d3.selectAll('rect.neg-node').attr(\"opacity\", '1')\r\n                                d3.selectAll('rect.pos-node').attr(\"opacity\", '1')\r\n                                d3.selectAll('.arc').remove()\r\n                                d3.selectAll('rect.MSV-edge').attr('opacity', '1')\r\n\r\n                                d3.selectAll('rect.diffmatrix').attr(\"opacity\", '1')\r\n                                d3.selectAll('rect.matrix').attr(\"opacity\", '1')\r\n\r\n                                // d3.selectAll('.kelp').attr(\"opacity\",'0.8')\r\n                            })\r\n                    }\r\n                    //绘制辅助线\r\n                    d3.select('g.matrix' + matrix.date).append('line')\r\n                        .classed('matrixline', true)\r\n                        .attr('x1', highScale(location[matrix.date] + 1))\r\n                        .attr('y1', y(-0.5))\r\n                        .attr('x2', highScale(location[matrix.date] + 1))\r\n                        .attr('y2', y(nodelen - 0.5))\r\n                        .attr('stroke', '#3c374a')\r\n                    d3.select('g.matrix' + matrix.date).append('line')\r\n                        .classed('matrixline', true)\r\n                        .attr('x1', highScale(location[matrix.date] + matrix_width + 1))\r\n                        .attr('y1', y(-0.5))\r\n                        .attr('x2', highScale(location[matrix.date] + matrix_width + 1))\r\n                        .attr('y2', y(nodelen - 0.5))\r\n                        .attr('stroke', '#3c374a')\r\n\r\n                })\r\n\r\n                //绘制high视图\r\n\r\n                this.svg.append('g')\r\n                    .attr('class', 'high-level')\r\n                    .selectAll('g.high')\r\n                    .data(highData)\r\n                    .join('g')\r\n                    .attr('class', 'high')\r\n                    .attr('id', d => d.date)\r\n                    .each(function(ddd, index) {\r\n\r\n                        let day_index = location[ddd.date]\r\n\r\n\r\n                        if (focusSpan[0] !== 'start' && index > focusSpan[0] && index < focusSpan[1]) {\r\n\r\n                        } else {\r\n\r\n                            //绘制边\r\n                            d3.select(this).selectAll('rect.high-edge')\r\n                                .data([0])\r\n                                .join('rect')\r\n                                .attr('class', 'high-edge')\r\n                                .classed('Edate' + ddd.date, true)\r\n                                .attr('x', highScale(day_index))\r\n                                .attr('y', y(0))\r\n                                .attr('width', (highScale(1) - highScale(0)))\r\n                                .attr('height', y(ddd.nodes.length - 1))\r\n                                // .attr('fill',d=>d>0?edgeColor(50):edgeColor(d))\r\n                                .attr('fill', 'white')\r\n                                .attr('opacity', 0)\r\n                                .on('mouseover', function(event) {\r\n                                    //鼠标悬浮，高亮当天；\r\n                                    d3.selectAll('rect.neg-node').attr(\"opacity\", '0.1')\r\n                                    d3.selectAll('rect.pos-node').attr(\"opacity\", '0.1')\r\n                                        // d3.selectAll('.kelp').attr(\"opacity\",'0')\r\n                                    let selector = \".date\" + ddd.date;\r\n                                    d3.selectAll(selector).attr(\"opacity\", '1')\r\n                                        //添加日期标签\r\n                                    d3.select(this.parentNode).append('text')\r\n                                        .classed('datetext', true)\r\n                                        .attr('x', highScale(day_index + 1.5))\r\n                                        .attr('y', y(0))\r\n                                        .text(ddd.date)\r\n                                        .attr('font-size', 15)\r\n                                        .attr('stroke', 'balck')\r\n                                })\r\n                                .on(\"mouseout\", function(event) {\r\n                                    d3.selectAll('rect.neg-node').attr(\"opacity\", '1')\r\n                                    d3.selectAll('rect.pos-node').attr(\"opacity\", '1')\r\n                                        // d3.selectAll('.kelp').attr(\"opacity\",0.8)\r\n                                    d3.selectAll('.datetext').remove()\r\n                                })\r\n                                .on('dblclick', function(event) {\r\n                                    if (unfoldSwitch) {\r\n                                        dispatch(updateUnfoldDiff(ddd.date))\r\n                                    } else {\r\n                                        dispatch(updateUnfoldDay(ddd.date))\r\n                                    }\r\n\r\n                                })\r\n                                //绘制节点\r\n                            d3.select(this).selectAll('g.high-node')\r\n                                .data(ddd.nodes)\r\n                                .join('g')\r\n                                .attr('class', 'high-node')\r\n                                .each(function(node) {\r\n\r\n                                    d3.select(this).append('rect')\r\n                                        .attr('class', 'neg-node')\r\n                                        .classed('date' + ddd.date, true)\r\n                                        .classed('node' + node.id, true)\r\n                                        .attr('x', highScale(day_index + 0.2))\r\n                                        .attr('y', y(index_scale(node.id)))\r\n                                        .attr('width', (highScale(1) - highScale(0)) * 0.6)\r\n                                        .attr('height', d => nodeScale(d.negdegree))\r\n                                        .attr('fill', d => colorSwitch ? color(d.negvalue) : negrect)\r\n                                        .on('mouseover', function(event) {\r\n                                            d3.selectAll('rect.neg-node').attr(\"opacity\", '0.1')\r\n                                            d3.selectAll('rect.pos-node').attr(\"opacity\", '0.1')\r\n                                            d3.selectAll('rect.diffmatrix').attr(\"opacity\", '0.1')\r\n                                            d3.selectAll('rect.matrix').attr(\"opacity\", '0.1')\r\n                                            let selector = \".node\" + node.id;\r\n                                            d3.selectAll(selector).attr(\"opacity\", '1')\r\n\r\n                                            d3.selectAll('rect.MSV-edge').attr('opacity', '0')\r\n                                            d3.selectAll('.start' + node.id).attr('opacity', '1')\r\n                                            d3.selectAll('.end' + node.id).attr('opacity', '1')\r\n\r\n                                            // d3.selectAll('.kelp').attr(\"opacity\",'0')\r\n\r\n\r\n                                        })\r\n                                        .on(\"mouseout\", function(event) {\r\n                                            d3.selectAll('rect.neg-node').attr(\"opacity\", '1')\r\n                                            d3.selectAll('rect.pos-node').attr(\"opacity\", '1')\r\n                                            d3.selectAll('.arc').remove()\r\n                                            d3.selectAll('rect.MSV-edge').attr('opacity', '1')\r\n\r\n                                            d3.selectAll('rect.diffmatrix').attr(\"opacity\", '1')\r\n                                            d3.selectAll('rect.matrix').attr(\"opacity\", '1')\r\n\r\n                                            // d3.selectAll('.kelp').attr(\"opacity\",'0.8')\r\n                                        })\r\n                                        .on('dblclick', function(event) {\r\n                                            if (unfoldSwitch) {\r\n                                                dispatch(updateUnfoldDiff(ddd.date))\r\n                                            } else {\r\n                                                dispatch(updateUnfoldDay(ddd.date))\r\n                                            }\r\n\r\n                                        })\r\n\r\n                                    d3.select(this).append('rect')\r\n                                        .attr('class', 'pos-node')\r\n                                        .classed('date' + ddd.date, true)\r\n                                        .classed('node' + node.id, true)\r\n                                        .attr('x', highScale(day_index + 0.2))\r\n                                        .attr('y', d => (y(index_scale(node.id)) - nodeScale(d.posdegree)))\r\n                                        .attr('width', (highScale(1) - highScale(0)) * 0.6)\r\n                                        .attr('height', d => nodeScale(d.posdegree))\r\n                                        .attr('fill', d => colorSwitch ? color(d.posvalue) : posrect)\r\n                                        .on('mouseover', function(event) {\r\n\r\n                                            d3.selectAll('rect.neg-node').attr(\"opacity\", '0.1')\r\n                                            d3.selectAll('rect.pos-node').attr(\"opacity\", '0.1')\r\n                                            d3.selectAll('rect.diffmatrix').attr(\"opacity\", '0.1')\r\n                                            d3.selectAll('rect.matrix').attr(\"opacity\", '0.1')\r\n\r\n                                            d3.selectAll('rect.MSV-edge').attr('opacity', '0')\r\n                                            let selector = \".node\" + node.id;\r\n                                            d3.selectAll(selector).attr(\"opacity\", '1')\r\n                                            d3.selectAll('.start' + node.id).attr('opacity', '1')\r\n                                            d3.selectAll('.end' + node.id).attr('opacity', '1')\r\n\r\n                                            // d3.selectAll('.kelp').attr(\"opacity\",'0')\r\n\r\n                                        })\r\n                                        .on(\"mouseout\", function(event) {\r\n                                            d3.selectAll('rect.neg-node').attr(\"opacity\", '1')\r\n                                            d3.selectAll('rect.pos-node').attr(\"opacity\", '1')\r\n                                            d3.selectAll('.arc').remove()\r\n                                            d3.selectAll('rect.MSV-edge').attr('opacity', '1')\r\n\r\n                                            d3.selectAll('rect.diffmatrix').attr(\"opacity\", '1')\r\n                                            d3.selectAll('rect.matrix').attr(\"opacity\", '1')\r\n\r\n                                            // d3.selectAll('.kelp').attr(\"opacity\",'0.8')\r\n                                        })\r\n                                        .on('dblclick', function(event) {\r\n                                            if (unfoldSwitch) {\r\n                                                dispatch(updateUnfoldDiff(ddd.date))\r\n                                            } else {\r\n                                                dispatch(updateUnfoldDay(ddd.date))\r\n                                            }\r\n\r\n                                        })\r\n\r\n\r\n                                })\r\n\r\n\r\n                        }\r\n\r\n\r\n                    })\r\n            }\r\n        }\r\n        // Function to compute density\r\n    kernelDensityEstimator(kernel, X) {\r\n        return function(V) {\r\n            return X.map(function(x) {\r\n                return [x, d3.mean(V, function(v) { return kernel(x - v); })];\r\n            });\r\n        };\r\n    }\r\n    kernelEpanechnikov(k) {\r\n        return function(v) {\r\n            return Math.abs(v /= k) <= 1 ? 0.75 * (1 - v * v) / k : 0;\r\n        };\r\n    }\r\n    reorder4Weight(highMatrix, nodecount, MatrixSet, orderweight) {\r\n        let dist = [] //距离矩阵 用于leaforder\r\n        let weight = orderweight * 0.01\r\n        let mweight = 1 - weight\r\n        let n = nodecount; //节点数量\r\n        let N = n ** 2; //矩阵cell数量，莫兰公式左上值\r\n        let K = 2 * n * (n - 1) //总邻接数量，莫兰公式左下值\r\n            //处理high矩阵\r\n        let t = highMatrix.length\r\n        highMatrix = reorder.transpose(highMatrix)\r\n        for (let i = 0; i < n; i++) {\r\n            let r = []\r\n            for (let j = 0; j < n; j++) {\r\n\r\n                let d = 0;\r\n                if (i !== j) {\r\n                    for (let k = 0; k < t; k++) {\r\n                        d = d + Math.abs(highMatrix[i][k][0] - highMatrix[j][k][0]) + Math.abs(highMatrix[i][k][1] - highMatrix[j][k][1])\r\n                    }\r\n                    d = weight * 0.5 * d / (n - 1) / t\r\n                }\r\n                r.push(d)\r\n            }\r\n            dist.push(r);\r\n        }\r\n            //处理矩阵\r\n        let Mlen = MatrixSet.length //矩阵数量\r\n        if (Mlen > 0) {\r\n            MatrixSet.forEach((matrix, mindex) => {\r\n                let A = 0; //求矩阵权重的总和\r\n                matrix.forEach((row, rowindex) => {\r\n                    row.forEach((cell, cellindex) => {\r\n                        A = A + cell\r\n                    })\r\n                })\r\n                let a = A / N; //矩阵权重的平均值\r\n                let B = 0; //求莫兰指数右下值\r\n                matrix.forEach((row, rowindex) => {\r\n                    row.forEach((cell, cellindex) => {\r\n                        B = B + (cell - a) ** 2\r\n                    })\r\n                })\r\n                for (let i = 0; i < n; i++) { //计算任意两行的距离\r\n                    for (let j = 0; j < i; j++) {\r\n                        let rowDist = 0;\r\n                        for (let p = 0; p < n; p++) {\r\n                            rowDist = rowDist + ((matrix[i][p] - a) * (matrix[j][p] - a))\r\n                        }\r\n                        rowDist = (N / K) * (2 * rowDist / B) //Is\r\n                        dist[i][j] += (((1 + (1 - n) * rowDist) * 0.5) / Mlen) * mweight //调整到0-1区间，然后除以多个矩阵数量集合感知，再乘以1-权重\r\n                        dist[j][i] += (((1 + (1 - n) * rowDist) * 0.5) / Mlen) * mweight\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        let order = reorder.optimal_leaf_order();\r\n        let row_perm = order.distance_matrix(dist)(highMatrix)\r\n        return row_perm;\r\n\r\n    }\r\n    MatrixMoran(matrix) {\r\n        let n = matrix.length; //节点数量\r\n        let N = n ** 2; //矩阵cell数量，莫兰公式左上值\r\n        let K = 2 * n * (n - 1) //总邻接数量，莫兰公式左下值\r\n        let A = 0; //求矩阵权重的总和\r\n        matrix.forEach((row, rowindex) => {\r\n            row.forEach((cell, cellindex) => {\r\n                A = A + cell\r\n            })\r\n        })\r\n        let a = A / N; //矩阵权重的平均值\r\n        let B = 0; //求莫兰指数右下值\r\n        matrix.forEach((row, rowindex) => {\r\n            row.forEach((cell, cellindex) => {\r\n                B = B + (cell - a) ** 2\r\n            })\r\n        })\r\n        let D = 0; //莫兰公式右上项\r\n        for (let i = 0; i < n - 1; i++) { //计算i和i+1行的距离\r\n            for (let j = 0; j < n; j++) {\r\n                D = D + (matrix[i][j] - a) * (matrix[i + 1][j] - a)\r\n            }\r\n        }\r\n        let moran = (N / K) * (2 * D / B)\r\n        console.log(n, a, A, N, K, D, B)\r\n        return moran\r\n    }\r\n    weighted_value_rows(r1, r2, cells, m) {\r\n        // console.log(r1,r2,cells,m)\r\n        let result = 0;\r\n        for (let i = 0; i < r1.length; i++) {\r\n            // result += Math.abs(r1[i]-r2[i])\r\n            // result += (r1[i]-r2[i])**2\r\n            result += (r1[i] * cells - m) * (r2[i] * cells - m);\r\n            if (r1[i] === 1 && r2[i] === 1) {\r\n                result += 100;\r\n            } else {\r\n                result += 0\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    reorderHigh(highData, nodecount, hugeMatrix) {\r\n        let matrix = [];\r\n        let m = 0,\r\n            n = 0;\r\n        for (let i = 0; i < highData.length; i++) {\r\n            let row = []\r\n            this.nodes.forEach((item, index) => {\r\n                row.push(highData[i].nodes[index].posdegree)\r\n            })\r\n            let row1 = []\r\n            this.nodes.forEach((item, index) => {\r\n                    row1.push(highData[i].nodes[index].negdegree)\r\n                })\r\n                // for(let j=0;j<nodecount;j++){\r\n                //     // console.log(highData[i].date,highData[i].nodes[j],j,i)\r\n                //     // row.push(highData[i].nodes[j].degree)\r\n                //     // if(highData[i].nodes[j].degree>this.degreeThreshold){\r\n                //     //     row.push(1)\r\n                //     //     m++;\r\n                //     // }else{\r\n                //     //     row.push(0);\r\n                //     // }\r\n                //     // n++;\r\n                // }\r\n            matrix.push(row)\r\n            matrix.push(row1)\r\n        }\r\n        console.log(matrix)\r\n        matrix = reorder.transpose(matrix)\r\n        console.log(matrix)\r\n        if (hugeMatrix.length > 0) {\r\n            matrix.forEach((item, index) => {\r\n                matrix[index] = matrix[index].concat(hugeMatrix[index])\r\n            })\r\n        }\r\n        console.log(matrix)\r\n        let dist = [];\r\n        let square = false;\r\n        for (let i = 0; i < matrix.length; i++) {\r\n            let r = []\r\n            for (let j = 0; j < matrix.length; j++) {\r\n\r\n                let d = this.weighted_value_rows(matrix[i], matrix[j], n, m);\r\n                if (square) {\r\n                    if (d >= 0) {\r\n                        r.push(-d * d);\r\n                        // dist[i][j] += -d * d;\r\n                    } else {\r\n                        r.push(d * d);\r\n                        // dist[i][j] += d * d;\r\n                    }\r\n                } else {\r\n                    r.push(-d);\r\n                    // dist[i][j] += -d;\r\n                }\r\n            }\r\n            dist.push(r);\r\n        }\r\n        console.log('dist', dist)\r\n        let order = reorder.optimal_leaf_order();\r\n        let row_perm = order.distance_matrix(dist)(matrix)\r\n        return row_perm;\r\n    }\r\ndrawColorLegend4Diff(container, width, height, start_point, axis_label) {\r\n    // 选择绘制容器\r\n    var svg = d3.select(container);\r\n    svg.attr(\"width\", width+start_point[0]*2).attr(\"height\", height * 3);\r\n\r\n    // 构建渐变色实例 #5389c0 #d2664f #E09585 #82a9d1\r\n    var linearGradient = svg.append(\"g\").append(\"linearGradient\").attr(\"id\", \"colorGradientDiff\"); \r\n    linearGradient.append(\"stop\").attr(\"offset\", \"0%\") .attr(\"stop-color\", \"#5389c0\"); \r\n    linearGradient.append(\"stop\").attr(\"offset\", \"49%\").attr(\"stop-color\", \"#ecf2f8\");\r\n    linearGradient.append(\"stop\").attr(\"offset\", \"50%\").attr(\"stop-color\", \"white\");\r\n    linearGradient.append(\"stop\").attr(\"offset\", \"51%\").attr(\"stop-color\", \"#faedeb\");\r\n    linearGradient.append(\"stop\").attr(\"offset\", \"100%\").attr(\"stop-color\", \"#d2664f\");\r\n\r\n    //用linearGradient填充矩形\r\n    svg.append(\"g\").attr(\"transform\", \"translate(\" + start_point[0] + \", \" + start_point[1] + \")\")\r\n      .append(\"rect\").attr(\"width\", width).attr(\"height\", height).style(\"fill\", \"url('#colorGradientDiff')\"); \r\n\r\n    // 构建刻度比例尺\r\n    var axis_scale = d3.scaleLinear().domain([0, 10]).range([0.7, width-0.3]);\r\n\r\n    // 绘制刻度：上面\r\n    var axis_top = svg.append(\"g\")\r\n      .attr(\"transform\", \"translate(\" + start_point[0] + \", \" + start_point[1] + \")\")\r\n      .call(d3.axisTop(axis_scale).ticks(2).tickSize(2).tickFormat(() => \"\"));\r\n    axis_top.append(\"text\").text(\"Negtive\").attr(\"x\", axis_scale(2.5)).attr(\"y\", -7).attr(\"font-size\", 8).attr(\"fill\", \"#82a9d1\");\r\n    axis_top.append(\"text\").text(\"Positive\").attr(\"x\", axis_scale(7.5)).attr(\"y\", -7).attr(\"font-size\", 8).attr(\"fill\", \"#E09585\");    \r\n    // 刻度+线:调整不透明度\r\n    axis_top.select(\".domain\").attr(\"opacity\", 0.5);\r\n    axis_top.selectAll(\".tick\").select(\"line\").attr(\"opacity\", 0.6);\r\n\r\n    // 绘制刻度:下面\r\n    var axis_bottom = svg.append(\"g\")\r\n      .attr(\"transform\", \"translate(\" + start_point[0] + \", \" + (start_point[1] + height) + \")\")\r\n      .call(d3.axisBottom(axis_scale).ticks(2).tickSize(2).tickFormat(() => \"\"));\r\n    axis_bottom.append(\"text\").text(axis_label[0]).attr(\"x\", axis_scale(0)).attr(\"y\", 12).attr(\"font-size\", 8).attr(\"fill\", \"black\");\r\n    axis_bottom.append(\"text\").text(axis_label[1]).attr(\"x\", axis_scale(5)).attr(\"y\", 12).attr(\"font-size\", 8).attr(\"fill\", \"black\");\r\n    axis_bottom.append(\"text\").text(axis_label[2]).attr(\"x\", axis_scale(10)).attr(\"y\", 12).attr(\"font-size\", 8).attr(\"fill\", \"black\");    \r\n    // 刻度+线:调整不透明度\r\n    axis_bottom.select(\".domain\").attr(\"opacity\", 0.5);\r\n    axis_bottom.selectAll(\".tick\").select(\"line\").attr(\"opacity\", 0.6);\r\n  }\r\n\r\n  drawColorLegend4Org(container, width, height, start_point, axis_label) {\r\n    // 选择绘制容器\r\n    var svg = d3.select(container);\r\n    svg.attr(\"width\", width+start_point[0]*2).attr(\"height\", height * 2);\r\n\r\n    // 构建渐变色实例\r\n    var linearGradient = svg.append(\"g\").append(\"linearGradient\").attr(\"id\", \"colorGradientOrg\"); \r\n    linearGradient.append(\"stop\").attr(\"offset\", \"0%\").attr(\"stop-color\", \"white\");\r\n    linearGradient.append(\"stop\").attr(\"offset\", \"100%\").attr(\"stop-color\", \"#3e403f\");\r\n\r\n    //用linearGradient填充矩形\r\n    svg.append(\"g\").attr(\"transform\", \"translate(\" + start_point[0] + \", \" + start_point[1] + \")\")\r\n      .append(\"rect\").attr(\"width\", width).attr(\"height\", height).style(\"fill\", \"url('#colorGradientOrg')\"); \r\n\r\n    // 构建刻度比例尺\r\n    var axis_scale = d3.scaleLinear().domain([0, 10]).range([0.7, width-0.3]);\r\n\r\n    // 绘制刻度:下面\r\n    var axis_bottom = svg.append(\"g\")\r\n      .attr(\"transform\", \"translate(\" + start_point[0] + \", \" + (start_point[1] + height) + \")\")\r\n      .call(d3.axisBottom(axis_scale).ticks(1).tickSize(2).tickFormat(() => \"\"));\r\n    axis_bottom.append(\"text\").text(axis_label[0]).attr(\"x\", axis_scale(0)).attr(\"y\", 12).attr(\"font-size\", 8).attr(\"fill\", \"black\");\r\n    axis_bottom.append(\"text\").text(axis_label[1]).attr(\"x\", axis_scale(10)).attr(\"y\", 12).attr(\"font-size\", 8).attr(\"fill\", \"black\");    \r\n    // 刻度+线:调整不透明度\r\n    axis_bottom.select(\".domain\").attr(\"opacity\", 0.5);\r\n    axis_bottom.selectAll(\".tick\").select(\"line\").attr(\"opacity\", 0.6);\r\n  }\r\n\r\n  drawColorLegendOuter() { \r\n    this.drawColorLegend4Diff(\"#scale-diff\", 70, 14, [0, 15], [-1, 0, 1]);\r\n    this.drawColorLegend4Org(\"#scale-org\", 70, 14, [5, 0], [0, 1]);\r\n  }\r\n    // 宽，高，【，y】\r\n};\r\n\r\nexport default new chart();","import React from 'react';\nimport { Card, Tooltip, Button, Switch,Slider } from 'antd';\nimport Chart from '../views/msv2-chart';\nimport './view-comp-style.less';\nimport { connect } from \"react-redux\";\nimport {ReloadOutlined ,RetweetOutlined,QuestionOutlined } from '@ant-design/icons';\nimport {reset, updateEdgeReorder, updateNeedOrder} from '../store/actions';\n\n\nclass View extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      resetcheck:'default',\n      msvSwitch:true,\n      kelpSwitch:true,\n      streamSwitch:false,\n      unfoldSwitch:true,\n      msvnodeSwitch:true,\n      threshold:30,\n      orderweight:50,\n      maxmapping:80,\n      colorSwitch:false,\n    };\n    this.resetButton = this.resetButton.bind(this) \n    this.unfoldSwitch = this.unfoldSwitch.bind(this) \n    this.nodeReorder = this.nodeReorder.bind(this) \n    this.edgeReorder = this.edgeReorder.bind(this) \n    this.streamSwitch = this.streamSwitch.bind(this) \n    this.MSVSwitch = this.MSVSwitch.bind(this)\n  }\n\n  componentDidMount() {\n    const { timeSpan ,nodeOrder} = this.props;\n    Chart.init(this.container,timeSpan, nodeOrder, this.props.dispatch);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { timeSpan, unfoldDay,unfoldDiff,nodeOrder,focusSpan,needOrder} = this.props;\n    if(prevProps.msvSwitch !== this.state.msvSwitch  || prevProps.needOrder !== needOrder || prevProps.timeSpan !== timeSpan || prevProps.unfoldSwitch !== this.state.unfoldSwitch || prevProps.unfoldDay !== unfoldDay || prevProps.nodeOrder.toString() !== nodeOrder.toString()){    \n      Chart.update(timeSpan,unfoldDay,unfoldDiff,nodeOrder,focusSpan,needOrder,this.state.threshold,this.state.maxmapping,this.state.orderweight,this.state.unfoldSwitch, this.state.msvSwitch,this.state.kelpSwitch ,this.state.colorSwitch,this.props.dispatch);\n    }\n  }\n  resetButton() {\n    this.props.dispatch(reset())\n  }\n  unfoldSwitch(checked){\n    this.setState({\n      unfoldSwitch:checked,\n    })\n  }\n  colorSwitch(checked){\n    this.setState({\n      colorSwitch:checked,\n    })\n  }\n  streamSwitch(checked){\n    this.setState({\n      streamSwitch:checked,\n    })\n  }\n  nodeReorder(){\n    this.props.dispatch(updateNeedOrder(true))\n  }\n  MSVSwitch(checked){\n    this.setState({\n      msvSwitch:checked,\n    })\n  }\n  KelpSwitch(checked){\n    this.setState({\n      kelpSwitch:checked,\n    })\n  }\n  msvnodeSwitch(checked){\n    this.setState({\n      msvnodeSwitch:checked,\n    })\n  }\n  StrongAfterChange(value){\n    this.setState({\n      threshold:value,\n    })\n  }\n  MaxAfterChange(value){\n    this.setState({\n      maxmapping:value,\n    })\n  }\n  OrderWeight(value){\n    this.setState({\n      orderweight:value,\n    })\n  }\n  edgeReorder(checked){\n    if(checked){\n      this.props.dispatch(updateEdgeReorder(true))\n    }else{\n      this.props.dispatch(updateEdgeReorder(false))\n    }\n  }\n\n  render() {\n    return (\n      <Card className=\"view view-i\" title=\"Nested Matrix Design\" extra={\n\n        <div height=\"30px\">   \n                <Tooltip title=\"Set the height max mapping of the bars in the overview matrix and stacked bar chart.\n                The smaller the value, the higher the bar height.\n                \">\n                <div style={{float:\"left\",marginTop:\"4px\"}}> &ensp; Max: &ensp; </div>\n                </Tooltip>\n\n                <div style={{width:\"100px\",float:\"left\"}}>\n                    <Slider tooltipPlacement='bottom' defaultValue={80} onChange={(value)=>this.MaxAfterChange(value)} />\n                </div>\n                <Tooltip title=\"Set the threshold of the difference mask.\n                The smaller the value, the more nodes are selected. \">\n                <div style={{float:\"left\",marginTop:\"4px\"}}> &ensp; Threshold: &ensp; </div>\n                  </Tooltip>\n\n                <div style={{width:\"100px\",float:\"left\"}}>\n                    <Slider tooltipPlacement='bottom' defaultValue={30} onChange={(value)=>this.StrongAfterChange(value)} />\n                </div>\n              <Tooltip title=\"Set the focus of our node reordering strategy, where 0 for the detail matrices only and 100 for the overview matrix only. \"><div style={{float:\"left\",marginTop:\"4px\"}}>  &ensp; OrderWeight: &ensp;  </div>\n              </Tooltip>\n                \n                <div style={{width:\"100px\",float:\"left\"}}>\n                    <Slider tooltipPlacement='bottom' defaultValue={50} onAfterChange={(value)=>this.OrderWeight(value)} />\n                </div>\n                <div style={{float:\"left\"}}>\n                <Tooltip title=\"Reorder the nodes in the nested matrix design. \">\n                    <div style={{marginTop:\"4px\",float:\"left\"}}>\n                      &ensp; Reorder: &ensp;\n                  <Button shape=\"circle\" type={this.state.resetcheck} onClick={this.nodeReorder} icon={<RetweetOutlined  style={{color:\"#3c374a\"}} />} size={'small'} ></Button>\n                    </div>\n\n          </Tooltip>\n \n                <Tooltip title=\"Unfold the difference or original graph detail matrix.\">\n                    <div style={{marginTop:\"4px\",float:\"left\"}}>\n                    &ensp; Unfold: &ensp;\n                  <Switch checkedChildren=\"Diff\" unCheckedChildren=\"Origin\" defaultChecked onChange={(checked)=>this.unfoldSwitch(checked)}/></div>\n                </Tooltip>\n\n                <Tooltip title=\"Display the matrices or not\">\n                    <div style={{marginTop:\"4px\",float:\"left\"}}>\n                &ensp; Matrix: &ensp; \n                  <Switch checkedChildren=\"On\" unCheckedChildren=\"Off\" defaultChecked onChange={(checked)=>this.MSVSwitch(checked)}/></div>\n                </Tooltip> \n\n                <Tooltip title=\"Display the difference mask or not\">\n                    <div style={{marginTop:\"4px\",float:\"left\"}}>\n                &ensp; DiffMask: &ensp; \n                  <Switch checkedChildren=\"On\" unCheckedChildren=\"Off\" defaultChecked onChange={(checked)=>this.KelpSwitch(checked)}/></div>\n                </Tooltip>   \n\n\n                <Tooltip title=\"Choose the focus mode of the overview matrix and difference mask\">\n                    <div style={{marginTop:\"4px\",float:\"left\"}}>\n                &ensp; Mode: &ensp; \n                  <Switch checkedChildren=\"Weight\" unCheckedChildren=\"Degree\" onChange={(checked)=>this.colorSwitch(checked)}/></div>\n                </Tooltip>\n\n                <Tooltip title=\"Fold all unfolded detail matrices\">\n                    <div style={{marginTop:\"4px\",float:\"left\"}}>\n                &ensp; FoldMatrix: &ensp; \n                  <Button shape=\"circle\" type={this.state.resetcheck} onClick={this.resetButton} icon={<ReloadOutlined  style={{color:\"#3c374a\"}} />} size={'small'} ></Button>\n                </div>\n                </Tooltip>\n                    <div style={{marginTop:\"4px\",float:\"left\"}}>\n                    &ensp;\n                <Tooltip placement='bottomRight' overlayStyle={{minWidth:700}} title={(<span>Welcome to DiffSeer! <br/> 1. You can double-click the column of the overview matrix to unfolded the detail matrix. \n<br/>2. You can double-click the column on the left of a detail matrix to fold the unfolded matrix.\n <br/>3. You can click the FoldMatrix button to fold all unfolded matrices.\n <br/>4. You can choose the type of the unfolded detail matrices with Unfold switch.\n<br/>5. You can set the OrderWeight then click the Reorder button to reorder the nodes. \n <br/>6. You can display or hide the nested matrix or difference mask with the Matrix switch or DiffMask switch.\n <br/>7. You can set the threshold of the difference mask with the Threshold slider.\n <br/>8. You can change the mode of the nested matrix design with the Mode switch.\n <br/>9. You can change the height of bars in the overview matrix and stacked bar chart with the Max slider.\n</span>)}>\n                    <Button shape=\"circle\" type={this.state.resetcheck} onClick={this.resetButton} icon={<QuestionOutlined  style={{color:\"#3c374a\"}} />} size={'small'} ></Button>\n                </Tooltip>\n                    </div>\n\n        </div>\n      </div>\n      }>\n        {/* <div className=\"view-container\" ref={ ref => this.container = ref }></div> */}\n<div className=\"view-container\" ref={ref => this.container = ref} style={{ position:\"relative\" }}>\n          <div style={{ width: '4%', display: 'flex', flexDirection: 'Column', justifyContent: 'flex-start', alignItems: 'center', position: \"absolute\", left: \"10px\", top: \"12px\" }}>\n            <svg id=\"scale-diff\" />\n            <svg id=\"scale-org\" style={{ margin: \"5 0\" }}/>\n          </div>\n        </div>\n        <div className=\"tooltip\"></div>\n      </Card>\n    );\n  }\n}\nconst mapStateToProps = (state, props) => ({\n  timeSpan:state.timeSpan,\n  unfoldDay:state.unfoldDay,\n  unfoldDiff:state.unfoldDiff,\n  nodeOrder:state.nodeOrder,\n  focusSpan:state.focusSpan,\n  needOrder:state.needOrder,\n  unfoldSwitch:state.unfoldSwitch,\n  MSVorder:state.MSVorder,\n  edgeReorder:state.edgeReorder,\n  streamSwitch:state.streamSwitch,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  dispatch\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(View);","import * as d3 from 'd3';\r\n// import originData from './data/dataset1/1D.json';\r\n// import originData from './data/dataset2/1D_5.json';\r\nimport originData from './data/dataset3/1D1_day1.json';\r\nimport { updateTimeSpan, updateSelectedDate } from '../store/actions';\r\n\r\nclass chart {\r\n    // 画布的宽高\r\n    width = 0;\r\n    height = 0;\r\n    // 外边距\r\n    margin = {\r\n        top: 10,\r\n        left: 30,\r\n        bottom: 20,\r\n        right: 10\r\n    };\r\n    svg = null;\r\n    // tooltip\r\n    tooltip = null;\r\n    topK = 10;\r\n    // 比例尺\r\n    x = d3.scaleLinear()\r\n    y = d3.scaleLinear()\r\n    time = d3.scaleUtc()\r\n    xAxis = null;\r\n    yAxis = null;\r\n    //线生成器\r\n    line = d3.line()\r\n        .defined(d => !isNaN(d.x))\r\n        .x(d => this.x(d.date))\r\n        .y(d => this.y(d.x));\r\n    //刷选初始化\r\n    brush = d3.brushX();\r\n    //时间转换器\r\n    parseDate = d3.timeParse('%Y-%m-%d');\r\n    //symbols\r\n    symbolSize = 60;\r\n    symbol = d3.symbol().type(d3.symbolTriangle).size(this.symbolSize);\r\n\r\n    // 初始化\r\n    init(container, dispatch) {\r\n        let data = JSON.parse(JSON.stringify(originData));\r\n        // data = data.slice(2200,2300)\r\n        data.forEach(element => {\r\n            element.date = this.parseDate(element.date);\r\n        });\r\n        let brushHere = this.brush\r\n        //长宽获取\r\n        this.width = container.clientWidth;\r\n        this.height = container.clientHeight;\r\n        //比例尺赋值\r\n        this.time.domain(d3.extent(data, d => d.date))\r\n            .range([this.margin.left, this.width - this.margin.right])\r\n        this.x.domain([0, data.length - 1])\r\n            .range([this.margin.left+5, this.width - this.margin.right])\r\n        this.y.domain([d3.max(data, d => d.x), d3.min(data, d => d.x)]).nice()\r\n            .range([this.margin.top, this.height - this.margin.bottom])\r\n        let colorScale = d3.scaleLinear()\r\n            .domain([0, data.length])\r\n            .range(['#dbe4ff', '#396EB0'])\r\n            //刷选初始化\r\n        let timeWidth = this.width - this.margin.right - this.margin.left\r\n        brushHere\r\n            .extent([\r\n                [this.margin.left, this.margin.top],\r\n                [this.width - this.margin.right, this.height+4 - this.margin.bottom]\r\n            ])\r\n            .on('end', (event) => {\r\n                let selection = event.selection;   \r\n                let dateRange\r\n                if (selection == null) {\r\n                    return;\r\n                }\r\n                if(selection[1]-selection[0]<350){\r\n                    d3.select('g.timeline-brush').call(brushHere.move, [selection[0],selection[0]+350])\r\n                    dateRange = [selection[0],selection[0]+250].map(d => this.x.invert(d));\r\n                }else{\r\n                    dateRange = selection.map(d => this.x.invert(d));\r\n                }\r\n                let begin = dateRange[0]<0?0:dateRange[0];\r\n                let end = dateRange[1];\r\n                dispatch(updateTimeSpan([begin, end]))\r\n            })\r\n            .on(\"start\", (event) => {\r\n                dispatch(updateSelectedDate([]))\r\n            })\r\n            // .on(\"brush\",(event)=>{\r\n            //     let selection = event.selection\r\n            //     let dateRange = selection.map(d => this.x.invert(d));\r\n            //     let begin = dateRange[0]<0?0:dateRange[0];\r\n            //     let end = dateRange[1];\r\n            //     dispatch(updateTimeSpan([begin, end]))\r\n            // })\r\n            // //坐标轴赋值\r\n        this.yAxis = g => g\r\n            .attr(\"transform\", `translate(${this.margin.left},0)`)\r\n            .call(d3.axisLeft(this.y).ticks(3))\r\n            .call(g => g.select(\".domain\").remove())\r\n        this.xAxis = g => g\r\n            .attr(\"transform\", `translate(0,${this.height +1 - this.margin.bottom})`)\r\n            .call(d3.axisBottom(this.time).ticks(this.width / 85).tickSizeOuter(0))\r\n            .call(g => g.select(\".domain\").remove())\r\n\r\n        //svg创建\r\n        this.svg = d3.select(container)\r\n            .append('svg')\r\n            .attr('width', this.width)\r\n            .attr('height', this.height)\r\n\r\n        this.svg.append('g').call(this.xAxis);\r\n        this.svg.append('g').call(this.yAxis);\r\n\r\n        //绘制折线\r\n        // this.svg.append('path')\r\n        //         .datum(data)\r\n        //         .attr(\"fill\", \"none\")\r\n        //         .attr(\"stroke\", \"#364fc7\")\r\n        //         .attr(\"stroke-width\", 0.8)\r\n        //         .attr(\"stroke-linejoin\", \"round\")\r\n        //         .attr(\"stroke-linecap\", \"round\")\r\n\r\n\r\n        //画散点\r\n        this.scatter = this.svg.selectAll('circle.scatter')\r\n            .data(data)\r\n            .join('circle')\r\n            // .join('circle')\r\n            .classed('scatter', true)\r\n            .attr('cx', (d, i) => this.x(i))\r\n            .attr('cy', d => this.y(d.x))\r\n            .attr('r', 3)\r\n            .attr('id', (d, i) => d.date)\r\n            // .attr('date',(d,i)=> d.date)\r\n            .attr('stroke-width', 0.1)\r\n            .attr('stroke', 'gray')\r\n            // .attr('opacity',0.8)\r\n            .attr('fill', (d, i) => colorScale(i))\r\n            // .attr('fill',(d,i) => {\r\n            // let date = new Date(d.date) \r\n            // return colorScale(date.getMonth())})\r\n            //添加brush\r\n\r\n        this.svg.append('g')\r\n            .attr('class', 'timeline-brush')\r\n            .call(brushHere)\r\n            .call(brushHere.move, [timeWidth*0.35,timeWidth*0.65])\r\n    }\r\n\r\n    // 更新数据，重绘视图\r\n    update(selectedDate, dispatch) {\r\n        //删除原有svg\r\n        d3.select('g.timeline-selectedDate').remove();\r\n\r\n        if (selectedDate.length > 0) {\r\n            this.svg.append('g')\r\n                .attr('class', 'timeline-selectedDate')\r\n                .selectAll('path.selectedTick')\r\n                .data(selectedDate)\r\n                .join('path')\r\n                .attr('d', this.symbol)\r\n                .attr('class', 'selectedTick')\r\n                .attr(\"transform\", d => {\r\n                    return `translate(${this.x(this.parseDate(d))},${0}) rotate(180) scale(1.5)`;\r\n                })\r\n                // .attr('fill', (d, i) => i==0?'black': 'none')\r\n                .attr('opacity', 0.4)\r\n                .attr('stroke', 'black')\r\n                .attr('stroke-width', 2)\r\n        }\r\n\r\n    }\r\n\r\n    drawPath(data, xScale, yScale) {\r\n\r\n        let path = d3.path();\r\n        path.moveTo(xScale(data[0].x), yScale(data[0].y));\r\n        data.slice(1, data.length).forEach((value, index, array) => {\r\n            path.lineTo(xScale(array[index].x), yScale(array[index].y))\r\n        });\r\n        return path;\r\n    }\r\n\r\n\r\n\r\n};\r\n\r\nexport default new chart();","import React from 'react';\r\nimport { Card, Tooltip, Button } from 'antd';\r\nimport Chart from '../views/project-timeline';\r\nimport './view-comp-style.less';\r\nimport { connect } from \"react-redux\";\r\nimport {QuestionOutlined } from '@ant-design/icons';\r\nimport {updateSelectedDate} from '../store/actions';\r\n\r\nclass View extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      resetcheck:'default'\r\n    };\r\n    this.resetButton = this.resetButton.bind(this) \r\n  }\r\n\r\n  componentDidMount() {\r\n    const { selectedDate } = this.props;\r\n    Chart.init(this.container, this.props.dispatch);\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const { selectedDate } = this.props;\r\n    if(prevProps.selectedDate !== selectedDate){\r\n      Chart.update(selectedDate, this.props.dispatch);\r\n    }\r\n  }\r\n  resetButton() {\r\n    this.props.dispatch(updateSelectedDate([]))\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Card className=\"view view-a\" title=\"TimeLine\" extra={\r\n        <div>                \r\n                <Tooltip title={(<span>Welcome to DiffSeer!<br/> You can brush the timeline to choose a period of interest.</span>)}>\r\n <Button shape=\"circle\" type={this.state.resetcheck} onClick={this.resetButton} icon={<QuestionOutlined  style={{color:\"#3c374a\"}} />} size={'small'} ></Button>\r\n                </Tooltip>\r\n        </div>\r\n      }>\r\n        <div className=\"view-container\" ref={ ref => this.container = ref }></div>\r\n        <div className=\"tooltip\"></div>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state, props) => ({\r\n  selectedDate:state.selectedDate\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  dispatch\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(View);","import React from 'react';\nimport './App.less';\nimport MSV2 from './components/MSV2';\nimport ProjectTimeLine from './components/ProjectTimeLine';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <ProjectTimeLine></ProjectTimeLine>\n        <MSV2></MSV2>\n    </div>\n  );\n}\n  \n  export default App;\n","\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'ADD_UNFOLDDAY': {\r\n            const { unfoldDay } = state\r\n            console.log(unfoldDay)\r\n            return {\r\n                ...state,\r\n                unfoldDay: [...unfoldDay,action.payload],\r\n            };\r\n        }\r\n        case 'DELETE_UNFOLDDAY': {\r\n            const { unfoldDay } = state\r\n            return {\r\n                ...state,\r\n                unfoldDay:unfoldDay.filter((item)=>item!==action.payload), \r\n            };\r\n        }\r\n        case 'UPDATE_UNFOLDDAY': {\r\n            const { unfoldDay,unfoldDiff } = state\r\n            console.log(unfoldDay)\r\n            if(unfoldDay.includes(action.payload)){\r\n                if(unfoldDiff.includes(action.payload)){\r\n                    return {\r\n                        ...state,\r\n                        unfoldDiff:unfoldDiff.filter((item)=>item!==action.payload),\r\n                        // needOrder:true,\r\n                    };\r\n                }else{\r\n                    return {\r\n                        ...state,\r\n                        unfoldDay:unfoldDay.filter((item)=>item!==action.payload),\r\n                        unfoldDiff:unfoldDiff.filter((item)=>item!==action.payload),\r\n                        // needOrder:true,\r\n                    };\r\n                }\r\n            }else{\r\n                return {\r\n                    ...state,\r\n                    unfoldDay: [...unfoldDay,action.payload],\r\n                    // needOrder:true,\r\n                };\r\n            }\r\n\r\n        }\r\n        case 'UPDATE_UNFOLDDIFF': {\r\n            const { unfoldDiff,unfoldDay } = state\r\n            console.log(unfoldDiff)\r\n            if(unfoldDay.includes(action.payload)){\r\n                if(unfoldDiff.includes(action.payload)){\r\n                    return {\r\n                        ...state,\r\n                        unfoldDiff:unfoldDiff.filter((item)=>item!==action.payload), \r\n                        unfoldDay:unfoldDay.filter((item)=>item!==action.payload), \r\n                        // needOrder:true,\r\n                    };\r\n                }else{\r\n                    return {\r\n                        ...state,\r\n                        unfoldDiff: [...unfoldDiff,action.payload], \r\n                        // needOrder:true,\r\n                    };\r\n                }\r\n\r\n            }else{\r\n                return {\r\n                    ...state,\r\n                    unfoldDiff: [...unfoldDiff,action.payload],\r\n                    unfoldDay: [...unfoldDay,action.payload],\r\n                    // needOrder:true,\r\n                };\r\n            }\r\n\r\n        }\r\n        case 'UPDATE_TIMESPAN': {\r\n            return {\r\n                ...state,\r\n                timeSpan: action.payload,\r\n                // nodeOrder:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27],\r\n                focusSpan:['start','end'],\r\n                unfoldDay:[],\r\n                unfoldDiff:[],\r\n                needOrder:false,\r\n                unfoldSwitch:true,\r\n                edgeReorder:false,\r\n                MSVorder:false,\r\n            };\r\n        }\r\n        case 'UPDATE_NEEDORDER': {\r\n            console.log('NEEDORDER',action.payload)\r\n            return {\r\n                ...state,\r\n                needOrder: action.payload,\r\n            };\r\n        }\r\n        case 'UPDATE_FOCUSSPAN': {\r\n            console.log('FUCUSspan',action.payload)\r\n            return {\r\n                ...state,\r\n                focusSpan: action.payload,\r\n                MSVorder:true,\r\n                needOrder:false,\r\n            };\r\n        }\r\n        case 'UPDATE_LOCATION': {\r\n            console.log(action.payload)\r\n            return {\r\n                ...state,\r\n                location: action.payload,\r\n            };\r\n        }\r\n        case 'UPDATE_UNFOLDSWITCH': {\r\n            console.log('UNFOLD SWITHC',action.payload)\r\n            return {\r\n                ...state,\r\n                unfoldSwitch: action.payload,\r\n            };\r\n        }\r\n        case 'UPDATE_EDGEREORDER': {\r\n            console.log('EDGE ORDER',action.payload)\r\n            return {\r\n                ...state,\r\n                edgeReorder: action.payload,\r\n            };\r\n        }\r\n        case 'UPDATE_NODEORDER': {\r\n            console.log(action.payload)\r\n            return {\r\n                ...state,\r\n                nodeOrder: action.payload,\r\n                needOrder:false,\r\n                MSVorder:false\r\n            };\r\n        }\r\n        case 'UPDATE_STREAMSWITCH': {\r\n            console.log('stream',action.payload)\r\n            return {\r\n                ...state,\r\n                streamSwitch: action.payload,\r\n            };\r\n        }\r\n        case 'RESET': {\r\n            console.log(action.payload)\r\n            return {\r\n                ...state,\r\n                unfoldDay:[],\r\n                unfoldDiff:[],\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport reducer from './reducer';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst composeEnhancers =\r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}) : compose;\r\n\r\nconst enhancer = composeEnhancers(\r\n    applyMiddleware(thunk),\r\n);\r\n\r\nconst initState = {\r\n    userID: null,\r\n    users: [],\r\n    userBehaviors: {},\r\n    dayTime: null,\r\n    hourBehaviors: {},\r\n    minBehaviorsOfHour: [],\r\n    userMinBehaviors: [],\r\n    selectedCircle: [],\r\n    selectedDiffCircle: [],\r\n    selectedDate: [],\r\n    networkView: [],\r\n    diffNetworkView: [],\r\n    timeSpan: ['start', 'end'],\r\n    unfoldDay: [],\r\n    location: {},\r\n    // nodeOrder:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27],\r\n    // nodeOrder: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179],\r\n    nodeOrder:[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\r\n    focusSpan: ['start', 'end'],\r\n    unfoldDiff: [],\r\n    needOrder: false,\r\n    unfoldSwitch: true,\r\n    edgeReorder: false,\r\n    MSVorder: false,\r\n    streamSwitch: true,\r\n}\r\n\r\nconst store = createStore(\r\n    reducer,\r\n    initState,\r\n    enhancer,\r\n);\r\n\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store'\nimport { Provider } from \"react-redux\";\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}